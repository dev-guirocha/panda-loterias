
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GameType
 * 
 */
export type GameType = $Result.DefaultSelection<Prisma.$GameTypePayload>
/**
 * Model PrizeTier
 * 
 */
export type PrizeTier = $Result.DefaultSelection<Prisma.$PrizeTierPayload>
/**
 * Model DrawSchedule
 * 
 */
export type DrawSchedule = $Result.DefaultSelection<Prisma.$DrawSchedulePayload>
/**
 * Model BetType
 * 
 */
export type BetType = $Result.DefaultSelection<Prisma.$BetTypePayload>
/**
 * Model PayoutRule
 * 
 */
export type PayoutRule = $Result.DefaultSelection<Prisma.$PayoutRulePayload>
/**
 * Model DrawResult
 * 
 */
export type DrawResult = $Result.DefaultSelection<Prisma.$DrawResultPayload>
/**
 * Model Bet
 * 
 */
export type Bet = $Result.DefaultSelection<Prisma.$BetPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const DrawStatus: {
  PENDING: 'PENDING',
  PUBLISHED: 'PUBLISHED',
  CANCELLED: 'CANCELLED'
};

export type DrawStatus = (typeof DrawStatus)[keyof typeof DrawStatus]


export const BetStatus: {
  PENDING: 'PENDING',
  WON: 'WON',
  LOST: 'LOST'
};

export type BetStatus = (typeof BetStatus)[keyof typeof BetStatus]

}

export type DrawStatus = $Enums.DrawStatus

export const DrawStatus: typeof $Enums.DrawStatus

export type BetStatus = $Enums.BetStatus

export const BetStatus: typeof $Enums.BetStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameType`: Exposes CRUD operations for the **GameType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameTypes
    * const gameTypes = await prisma.gameType.findMany()
    * ```
    */
  get gameType(): Prisma.GameTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prizeTier`: Exposes CRUD operations for the **PrizeTier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrizeTiers
    * const prizeTiers = await prisma.prizeTier.findMany()
    * ```
    */
  get prizeTier(): Prisma.PrizeTierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.drawSchedule`: Exposes CRUD operations for the **DrawSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DrawSchedules
    * const drawSchedules = await prisma.drawSchedule.findMany()
    * ```
    */
  get drawSchedule(): Prisma.DrawScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.betType`: Exposes CRUD operations for the **BetType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BetTypes
    * const betTypes = await prisma.betType.findMany()
    * ```
    */
  get betType(): Prisma.BetTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payoutRule`: Exposes CRUD operations for the **PayoutRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayoutRules
    * const payoutRules = await prisma.payoutRule.findMany()
    * ```
    */
  get payoutRule(): Prisma.PayoutRuleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.drawResult`: Exposes CRUD operations for the **DrawResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DrawResults
    * const drawResults = await prisma.drawResult.findMany()
    * ```
    */
  get drawResult(): Prisma.DrawResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bet`: Exposes CRUD operations for the **Bet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bets
    * const bets = await prisma.bet.findMany()
    * ```
    */
  get bet(): Prisma.BetDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GameType: 'GameType',
    PrizeTier: 'PrizeTier',
    DrawSchedule: 'DrawSchedule',
    BetType: 'BetType',
    PayoutRule: 'PayoutRule',
    DrawResult: 'DrawResult',
    Bet: 'Bet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "gameType" | "prizeTier" | "drawSchedule" | "betType" | "payoutRule" | "drawResult" | "bet"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GameType: {
        payload: Prisma.$GameTypePayload<ExtArgs>
        fields: Prisma.GameTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          findFirst: {
            args: Prisma.GameTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          findMany: {
            args: Prisma.GameTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>[]
          }
          create: {
            args: Prisma.GameTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          createMany: {
            args: Prisma.GameTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>[]
          }
          delete: {
            args: Prisma.GameTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          update: {
            args: Prisma.GameTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          deleteMany: {
            args: Prisma.GameTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>[]
          }
          upsert: {
            args: Prisma.GameTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTypePayload>
          }
          aggregate: {
            args: Prisma.GameTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameType>
          }
          groupBy: {
            args: Prisma.GameTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameTypeCountArgs<ExtArgs>
            result: $Utils.Optional<GameTypeCountAggregateOutputType> | number
          }
        }
      }
      PrizeTier: {
        payload: Prisma.$PrizeTierPayload<ExtArgs>
        fields: Prisma.PrizeTierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrizeTierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrizeTierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          findFirst: {
            args: Prisma.PrizeTierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrizeTierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          findMany: {
            args: Prisma.PrizeTierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>[]
          }
          create: {
            args: Prisma.PrizeTierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          createMany: {
            args: Prisma.PrizeTierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrizeTierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>[]
          }
          delete: {
            args: Prisma.PrizeTierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          update: {
            args: Prisma.PrizeTierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          deleteMany: {
            args: Prisma.PrizeTierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrizeTierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrizeTierUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>[]
          }
          upsert: {
            args: Prisma.PrizeTierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrizeTierPayload>
          }
          aggregate: {
            args: Prisma.PrizeTierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrizeTier>
          }
          groupBy: {
            args: Prisma.PrizeTierGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrizeTierGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrizeTierCountArgs<ExtArgs>
            result: $Utils.Optional<PrizeTierCountAggregateOutputType> | number
          }
        }
      }
      DrawSchedule: {
        payload: Prisma.$DrawSchedulePayload<ExtArgs>
        fields: Prisma.DrawScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DrawScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DrawScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          findFirst: {
            args: Prisma.DrawScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DrawScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          findMany: {
            args: Prisma.DrawScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>[]
          }
          create: {
            args: Prisma.DrawScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          createMany: {
            args: Prisma.DrawScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DrawScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>[]
          }
          delete: {
            args: Prisma.DrawScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          update: {
            args: Prisma.DrawScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          deleteMany: {
            args: Prisma.DrawScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DrawScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DrawScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>[]
          }
          upsert: {
            args: Prisma.DrawScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawSchedulePayload>
          }
          aggregate: {
            args: Prisma.DrawScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDrawSchedule>
          }
          groupBy: {
            args: Prisma.DrawScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<DrawScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.DrawScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<DrawScheduleCountAggregateOutputType> | number
          }
        }
      }
      BetType: {
        payload: Prisma.$BetTypePayload<ExtArgs>
        fields: Prisma.BetTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BetTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BetTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          findFirst: {
            args: Prisma.BetTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BetTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          findMany: {
            args: Prisma.BetTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>[]
          }
          create: {
            args: Prisma.BetTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          createMany: {
            args: Prisma.BetTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BetTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>[]
          }
          delete: {
            args: Prisma.BetTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          update: {
            args: Prisma.BetTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          deleteMany: {
            args: Prisma.BetTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BetTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BetTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>[]
          }
          upsert: {
            args: Prisma.BetTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetTypePayload>
          }
          aggregate: {
            args: Prisma.BetTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBetType>
          }
          groupBy: {
            args: Prisma.BetTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BetTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BetTypeCountArgs<ExtArgs>
            result: $Utils.Optional<BetTypeCountAggregateOutputType> | number
          }
        }
      }
      PayoutRule: {
        payload: Prisma.$PayoutRulePayload<ExtArgs>
        fields: Prisma.PayoutRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayoutRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayoutRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          findFirst: {
            args: Prisma.PayoutRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayoutRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          findMany: {
            args: Prisma.PayoutRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>[]
          }
          create: {
            args: Prisma.PayoutRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          createMany: {
            args: Prisma.PayoutRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayoutRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>[]
          }
          delete: {
            args: Prisma.PayoutRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          update: {
            args: Prisma.PayoutRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          deleteMany: {
            args: Prisma.PayoutRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayoutRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayoutRuleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>[]
          }
          upsert: {
            args: Prisma.PayoutRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayoutRulePayload>
          }
          aggregate: {
            args: Prisma.PayoutRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayoutRule>
          }
          groupBy: {
            args: Prisma.PayoutRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayoutRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayoutRuleCountArgs<ExtArgs>
            result: $Utils.Optional<PayoutRuleCountAggregateOutputType> | number
          }
        }
      }
      DrawResult: {
        payload: Prisma.$DrawResultPayload<ExtArgs>
        fields: Prisma.DrawResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DrawResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DrawResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          findFirst: {
            args: Prisma.DrawResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DrawResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          findMany: {
            args: Prisma.DrawResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>[]
          }
          create: {
            args: Prisma.DrawResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          createMany: {
            args: Prisma.DrawResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DrawResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>[]
          }
          delete: {
            args: Prisma.DrawResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          update: {
            args: Prisma.DrawResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          deleteMany: {
            args: Prisma.DrawResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DrawResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DrawResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>[]
          }
          upsert: {
            args: Prisma.DrawResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DrawResultPayload>
          }
          aggregate: {
            args: Prisma.DrawResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDrawResult>
          }
          groupBy: {
            args: Prisma.DrawResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<DrawResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.DrawResultCountArgs<ExtArgs>
            result: $Utils.Optional<DrawResultCountAggregateOutputType> | number
          }
        }
      }
      Bet: {
        payload: Prisma.$BetPayload<ExtArgs>
        fields: Prisma.BetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          findFirst: {
            args: Prisma.BetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          findMany: {
            args: Prisma.BetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>[]
          }
          create: {
            args: Prisma.BetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          createMany: {
            args: Prisma.BetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>[]
          }
          delete: {
            args: Prisma.BetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          update: {
            args: Prisma.BetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          deleteMany: {
            args: Prisma.BetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>[]
          }
          upsert: {
            args: Prisma.BetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BetPayload>
          }
          aggregate: {
            args: Prisma.BetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBet>
          }
          groupBy: {
            args: Prisma.BetGroupByArgs<ExtArgs>
            result: $Utils.Optional<BetGroupByOutputType>[]
          }
          count: {
            args: Prisma.BetCountArgs<ExtArgs>
            result: $Utils.Optional<BetCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    gameType?: GameTypeOmit
    prizeTier?: PrizeTierOmit
    drawSchedule?: DrawScheduleOmit
    betType?: BetTypeOmit
    payoutRule?: PayoutRuleOmit
    drawResult?: DrawResultOmit
    bet?: BetOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bets?: boolean | UserCountOutputTypeCountBetsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
  }


  /**
   * Count Type GameTypeCountOutputType
   */

  export type GameTypeCountOutputType = {
    bets: number
  }

  export type GameTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bets?: boolean | GameTypeCountOutputTypeCountBetsArgs
  }

  // Custom InputTypes
  /**
   * GameTypeCountOutputType without action
   */
  export type GameTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTypeCountOutputType
     */
    select?: GameTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameTypeCountOutputType without action
   */
  export type GameTypeCountOutputTypeCountBetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
  }


  /**
   * Count Type PrizeTierCountOutputType
   */

  export type PrizeTierCountOutputType = {
    payout_rules: number
    bets: number
  }

  export type PrizeTierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payout_rules?: boolean | PrizeTierCountOutputTypeCountPayout_rulesArgs
    bets?: boolean | PrizeTierCountOutputTypeCountBetsArgs
  }

  // Custom InputTypes
  /**
   * PrizeTierCountOutputType without action
   */
  export type PrizeTierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTierCountOutputType
     */
    select?: PrizeTierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrizeTierCountOutputType without action
   */
  export type PrizeTierCountOutputTypeCountPayout_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayoutRuleWhereInput
  }

  /**
   * PrizeTierCountOutputType without action
   */
  export type PrizeTierCountOutputTypeCountBetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
  }


  /**
   * Count Type DrawScheduleCountOutputType
   */

  export type DrawScheduleCountOutputType = {
    draw_results: number
  }

  export type DrawScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draw_results?: boolean | DrawScheduleCountOutputTypeCountDraw_resultsArgs
  }

  // Custom InputTypes
  /**
   * DrawScheduleCountOutputType without action
   */
  export type DrawScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawScheduleCountOutputType
     */
    select?: DrawScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DrawScheduleCountOutputType without action
   */
  export type DrawScheduleCountOutputTypeCountDraw_resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrawResultWhereInput
  }


  /**
   * Count Type BetTypeCountOutputType
   */

  export type BetTypeCountOutputType = {
    payout_rules: number
    bets: number
  }

  export type BetTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payout_rules?: boolean | BetTypeCountOutputTypeCountPayout_rulesArgs
    bets?: boolean | BetTypeCountOutputTypeCountBetsArgs
  }

  // Custom InputTypes
  /**
   * BetTypeCountOutputType without action
   */
  export type BetTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetTypeCountOutputType
     */
    select?: BetTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BetTypeCountOutputType without action
   */
  export type BetTypeCountOutputTypeCountPayout_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayoutRuleWhereInput
  }

  /**
   * BetTypeCountOutputType without action
   */
  export type BetTypeCountOutputTypeCountBetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
  }


  /**
   * Count Type DrawResultCountOutputType
   */

  export type DrawResultCountOutputType = {
    bets: number
  }

  export type DrawResultCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bets?: boolean | DrawResultCountOutputTypeCountBetsArgs
  }

  // Custom InputTypes
  /**
   * DrawResultCountOutputType without action
   */
  export type DrawResultCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResultCountOutputType
     */
    select?: DrawResultCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DrawResultCountOutputType without action
   */
  export type DrawResultCountOutputTypeCountBetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    virtual_credits: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    virtual_credits: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    virtual_credits: Decimal | null
    is_admin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    virtual_credits: Decimal | null
    is_admin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    virtual_credits: number
    is_admin: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    virtual_credits?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    virtual_credits?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    virtual_credits?: true
    is_admin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    virtual_credits?: true
    is_admin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    virtual_credits?: true
    is_admin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    virtual_credits: Decimal
    is_admin: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    virtual_credits?: boolean
    is_admin?: boolean
    bets?: boolean | User$betsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    virtual_credits?: boolean
    is_admin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    virtual_credits?: boolean
    is_admin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    virtual_credits?: boolean
    is_admin?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "virtual_credits" | "is_admin", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bets?: boolean | User$betsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      bets: Prisma.$BetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      virtual_credits: Prisma.Decimal
      is_admin: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bets<T extends User$betsArgs<ExtArgs> = {}>(args?: Subset<T, User$betsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly virtual_credits: FieldRef<"User", 'Decimal'>
    readonly is_admin: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.bets
   */
  export type User$betsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    where?: BetWhereInput
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    cursor?: BetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GameType
   */

  export type AggregateGameType = {
    _count: GameTypeCountAggregateOutputType | null
    _avg: GameTypeAvgAggregateOutputType | null
    _sum: GameTypeSumAggregateOutputType | null
    _min: GameTypeMinAggregateOutputType | null
    _max: GameTypeMaxAggregateOutputType | null
  }

  export type GameTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type GameTypeSumAggregateOutputType = {
    id: number | null
  }

  export type GameTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type GameTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type GameTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type GameTypeAvgAggregateInputType = {
    id?: true
  }

  export type GameTypeSumAggregateInputType = {
    id?: true
  }

  export type GameTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GameTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GameTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type GameTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameType to aggregate.
     */
    where?: GameTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTypes to fetch.
     */
    orderBy?: GameTypeOrderByWithRelationInput | GameTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameTypes
    **/
    _count?: true | GameTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameTypeMaxAggregateInputType
  }

  export type GetGameTypeAggregateType<T extends GameTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateGameType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameType[P]>
      : GetScalarType<T[P], AggregateGameType[P]>
  }




  export type GameTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTypeWhereInput
    orderBy?: GameTypeOrderByWithAggregationInput | GameTypeOrderByWithAggregationInput[]
    by: GameTypeScalarFieldEnum[] | GameTypeScalarFieldEnum
    having?: GameTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameTypeCountAggregateInputType | true
    _avg?: GameTypeAvgAggregateInputType
    _sum?: GameTypeSumAggregateInputType
    _min?: GameTypeMinAggregateInputType
    _max?: GameTypeMaxAggregateInputType
  }

  export type GameTypeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: GameTypeCountAggregateOutputType | null
    _avg: GameTypeAvgAggregateOutputType | null
    _sum: GameTypeSumAggregateOutputType | null
    _min: GameTypeMinAggregateOutputType | null
    _max: GameTypeMaxAggregateOutputType | null
  }

  type GetGameTypeGroupByPayload<T extends GameTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameTypeGroupByOutputType[P]>
            : GetScalarType<T[P], GameTypeGroupByOutputType[P]>
        }
      >
    >


  export type GameTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    bets?: boolean | GameType$betsArgs<ExtArgs>
    _count?: boolean | GameTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameType"]>

  export type GameTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["gameType"]>

  export type GameTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["gameType"]>

  export type GameTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type GameTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["gameType"]>
  export type GameTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bets?: boolean | GameType$betsArgs<ExtArgs>
    _count?: boolean | GameTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameType"
    objects: {
      bets: Prisma.$BetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["gameType"]>
    composites: {}
  }

  type GameTypeGetPayload<S extends boolean | null | undefined | GameTypeDefaultArgs> = $Result.GetResult<Prisma.$GameTypePayload, S>

  type GameTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameTypeCountAggregateInputType | true
    }

  export interface GameTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameType'], meta: { name: 'GameType' } }
    /**
     * Find zero or one GameType that matches the filter.
     * @param {GameTypeFindUniqueArgs} args - Arguments to find a GameType
     * @example
     * // Get one GameType
     * const gameType = await prisma.gameType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameTypeFindUniqueArgs>(args: SelectSubset<T, GameTypeFindUniqueArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameTypeFindUniqueOrThrowArgs} args - Arguments to find a GameType
     * @example
     * // Get one GameType
     * const gameType = await prisma.gameType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, GameTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeFindFirstArgs} args - Arguments to find a GameType
     * @example
     * // Get one GameType
     * const gameType = await prisma.gameType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameTypeFindFirstArgs>(args?: SelectSubset<T, GameTypeFindFirstArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeFindFirstOrThrowArgs} args - Arguments to find a GameType
     * @example
     * // Get one GameType
     * const gameType = await prisma.gameType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, GameTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameTypes
     * const gameTypes = await prisma.gameType.findMany()
     * 
     * // Get first 10 GameTypes
     * const gameTypes = await prisma.gameType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameTypeWithIdOnly = await prisma.gameType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameTypeFindManyArgs>(args?: SelectSubset<T, GameTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameType.
     * @param {GameTypeCreateArgs} args - Arguments to create a GameType.
     * @example
     * // Create one GameType
     * const GameType = await prisma.gameType.create({
     *   data: {
     *     // ... data to create a GameType
     *   }
     * })
     * 
     */
    create<T extends GameTypeCreateArgs>(args: SelectSubset<T, GameTypeCreateArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameTypes.
     * @param {GameTypeCreateManyArgs} args - Arguments to create many GameTypes.
     * @example
     * // Create many GameTypes
     * const gameType = await prisma.gameType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameTypeCreateManyArgs>(args?: SelectSubset<T, GameTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameTypes and returns the data saved in the database.
     * @param {GameTypeCreateManyAndReturnArgs} args - Arguments to create many GameTypes.
     * @example
     * // Create many GameTypes
     * const gameType = await prisma.gameType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameTypes and only return the `id`
     * const gameTypeWithIdOnly = await prisma.gameType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, GameTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameType.
     * @param {GameTypeDeleteArgs} args - Arguments to delete one GameType.
     * @example
     * // Delete one GameType
     * const GameType = await prisma.gameType.delete({
     *   where: {
     *     // ... filter to delete one GameType
     *   }
     * })
     * 
     */
    delete<T extends GameTypeDeleteArgs>(args: SelectSubset<T, GameTypeDeleteArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameType.
     * @param {GameTypeUpdateArgs} args - Arguments to update one GameType.
     * @example
     * // Update one GameType
     * const gameType = await prisma.gameType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameTypeUpdateArgs>(args: SelectSubset<T, GameTypeUpdateArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameTypes.
     * @param {GameTypeDeleteManyArgs} args - Arguments to filter GameTypes to delete.
     * @example
     * // Delete a few GameTypes
     * const { count } = await prisma.gameType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameTypeDeleteManyArgs>(args?: SelectSubset<T, GameTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameTypes
     * const gameType = await prisma.gameType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameTypeUpdateManyArgs>(args: SelectSubset<T, GameTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTypes and returns the data updated in the database.
     * @param {GameTypeUpdateManyAndReturnArgs} args - Arguments to update many GameTypes.
     * @example
     * // Update many GameTypes
     * const gameType = await prisma.gameType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameTypes and only return the `id`
     * const gameTypeWithIdOnly = await prisma.gameType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, GameTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameType.
     * @param {GameTypeUpsertArgs} args - Arguments to update or create a GameType.
     * @example
     * // Update or create a GameType
     * const gameType = await prisma.gameType.upsert({
     *   create: {
     *     // ... data to create a GameType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameType we want to update
     *   }
     * })
     */
    upsert<T extends GameTypeUpsertArgs>(args: SelectSubset<T, GameTypeUpsertArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeCountArgs} args - Arguments to filter GameTypes to count.
     * @example
     * // Count the number of GameTypes
     * const count = await prisma.gameType.count({
     *   where: {
     *     // ... the filter for the GameTypes we want to count
     *   }
     * })
    **/
    count<T extends GameTypeCountArgs>(
      args?: Subset<T, GameTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameTypeAggregateArgs>(args: Subset<T, GameTypeAggregateArgs>): Prisma.PrismaPromise<GetGameTypeAggregateType<T>>

    /**
     * Group by GameType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameTypeGroupByArgs['orderBy'] }
        : { orderBy?: GameTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameType model
   */
  readonly fields: GameTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bets<T extends GameType$betsArgs<ExtArgs> = {}>(args?: Subset<T, GameType$betsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameType model
   */
  interface GameTypeFieldRefs {
    readonly id: FieldRef<"GameType", 'Int'>
    readonly name: FieldRef<"GameType", 'String'>
    readonly description: FieldRef<"GameType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameType findUnique
   */
  export type GameTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter, which GameType to fetch.
     */
    where: GameTypeWhereUniqueInput
  }

  /**
   * GameType findUniqueOrThrow
   */
  export type GameTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter, which GameType to fetch.
     */
    where: GameTypeWhereUniqueInput
  }

  /**
   * GameType findFirst
   */
  export type GameTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter, which GameType to fetch.
     */
    where?: GameTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTypes to fetch.
     */
    orderBy?: GameTypeOrderByWithRelationInput | GameTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTypes.
     */
    cursor?: GameTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTypes.
     */
    distinct?: GameTypeScalarFieldEnum | GameTypeScalarFieldEnum[]
  }

  /**
   * GameType findFirstOrThrow
   */
  export type GameTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter, which GameType to fetch.
     */
    where?: GameTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTypes to fetch.
     */
    orderBy?: GameTypeOrderByWithRelationInput | GameTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTypes.
     */
    cursor?: GameTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTypes.
     */
    distinct?: GameTypeScalarFieldEnum | GameTypeScalarFieldEnum[]
  }

  /**
   * GameType findMany
   */
  export type GameTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter, which GameTypes to fetch.
     */
    where?: GameTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTypes to fetch.
     */
    orderBy?: GameTypeOrderByWithRelationInput | GameTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameTypes.
     */
    cursor?: GameTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTypes.
     */
    skip?: number
    distinct?: GameTypeScalarFieldEnum | GameTypeScalarFieldEnum[]
  }

  /**
   * GameType create
   */
  export type GameTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a GameType.
     */
    data: XOR<GameTypeCreateInput, GameTypeUncheckedCreateInput>
  }

  /**
   * GameType createMany
   */
  export type GameTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameTypes.
     */
    data: GameTypeCreateManyInput | GameTypeCreateManyInput[]
  }

  /**
   * GameType createManyAndReturn
   */
  export type GameTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * The data used to create many GameTypes.
     */
    data: GameTypeCreateManyInput | GameTypeCreateManyInput[]
  }

  /**
   * GameType update
   */
  export type GameTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a GameType.
     */
    data: XOR<GameTypeUpdateInput, GameTypeUncheckedUpdateInput>
    /**
     * Choose, which GameType to update.
     */
    where: GameTypeWhereUniqueInput
  }

  /**
   * GameType updateMany
   */
  export type GameTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameTypes.
     */
    data: XOR<GameTypeUpdateManyMutationInput, GameTypeUncheckedUpdateManyInput>
    /**
     * Filter which GameTypes to update
     */
    where?: GameTypeWhereInput
    /**
     * Limit how many GameTypes to update.
     */
    limit?: number
  }

  /**
   * GameType updateManyAndReturn
   */
  export type GameTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * The data used to update GameTypes.
     */
    data: XOR<GameTypeUpdateManyMutationInput, GameTypeUncheckedUpdateManyInput>
    /**
     * Filter which GameTypes to update
     */
    where?: GameTypeWhereInput
    /**
     * Limit how many GameTypes to update.
     */
    limit?: number
  }

  /**
   * GameType upsert
   */
  export type GameTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the GameType to update in case it exists.
     */
    where: GameTypeWhereUniqueInput
    /**
     * In case the GameType found by the `where` argument doesn't exist, create a new GameType with this data.
     */
    create: XOR<GameTypeCreateInput, GameTypeUncheckedCreateInput>
    /**
     * In case the GameType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameTypeUpdateInput, GameTypeUncheckedUpdateInput>
  }

  /**
   * GameType delete
   */
  export type GameTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
    /**
     * Filter which GameType to delete.
     */
    where: GameTypeWhereUniqueInput
  }

  /**
   * GameType deleteMany
   */
  export type GameTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTypes to delete
     */
    where?: GameTypeWhereInput
    /**
     * Limit how many GameTypes to delete.
     */
    limit?: number
  }

  /**
   * GameType.bets
   */
  export type GameType$betsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    where?: BetWhereInput
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    cursor?: BetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * GameType without action
   */
  export type GameTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameType
     */
    select?: GameTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameType
     */
    omit?: GameTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTypeInclude<ExtArgs> | null
  }


  /**
   * Model PrizeTier
   */

  export type AggregatePrizeTier = {
    _count: PrizeTierCountAggregateOutputType | null
    _avg: PrizeTierAvgAggregateOutputType | null
    _sum: PrizeTierSumAggregateOutputType | null
    _min: PrizeTierMinAggregateOutputType | null
    _max: PrizeTierMaxAggregateOutputType | null
  }

  export type PrizeTierAvgAggregateOutputType = {
    id: number | null
    start_prize: number | null
    end_prize: number | null
  }

  export type PrizeTierSumAggregateOutputType = {
    id: number | null
    start_prize: number | null
    end_prize: number | null
  }

  export type PrizeTierMinAggregateOutputType = {
    id: number | null
    name: string | null
    start_prize: number | null
    end_prize: number | null
    description: string | null
  }

  export type PrizeTierMaxAggregateOutputType = {
    id: number | null
    name: string | null
    start_prize: number | null
    end_prize: number | null
    description: string | null
  }

  export type PrizeTierCountAggregateOutputType = {
    id: number
    name: number
    start_prize: number
    end_prize: number
    description: number
    _all: number
  }


  export type PrizeTierAvgAggregateInputType = {
    id?: true
    start_prize?: true
    end_prize?: true
  }

  export type PrizeTierSumAggregateInputType = {
    id?: true
    start_prize?: true
    end_prize?: true
  }

  export type PrizeTierMinAggregateInputType = {
    id?: true
    name?: true
    start_prize?: true
    end_prize?: true
    description?: true
  }

  export type PrizeTierMaxAggregateInputType = {
    id?: true
    name?: true
    start_prize?: true
    end_prize?: true
    description?: true
  }

  export type PrizeTierCountAggregateInputType = {
    id?: true
    name?: true
    start_prize?: true
    end_prize?: true
    description?: true
    _all?: true
  }

  export type PrizeTierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrizeTier to aggregate.
     */
    where?: PrizeTierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrizeTiers to fetch.
     */
    orderBy?: PrizeTierOrderByWithRelationInput | PrizeTierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrizeTierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrizeTiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrizeTiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrizeTiers
    **/
    _count?: true | PrizeTierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrizeTierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrizeTierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrizeTierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrizeTierMaxAggregateInputType
  }

  export type GetPrizeTierAggregateType<T extends PrizeTierAggregateArgs> = {
        [P in keyof T & keyof AggregatePrizeTier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrizeTier[P]>
      : GetScalarType<T[P], AggregatePrizeTier[P]>
  }




  export type PrizeTierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrizeTierWhereInput
    orderBy?: PrizeTierOrderByWithAggregationInput | PrizeTierOrderByWithAggregationInput[]
    by: PrizeTierScalarFieldEnum[] | PrizeTierScalarFieldEnum
    having?: PrizeTierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrizeTierCountAggregateInputType | true
    _avg?: PrizeTierAvgAggregateInputType
    _sum?: PrizeTierSumAggregateInputType
    _min?: PrizeTierMinAggregateInputType
    _max?: PrizeTierMaxAggregateInputType
  }

  export type PrizeTierGroupByOutputType = {
    id: number
    name: string
    start_prize: number
    end_prize: number
    description: string | null
    _count: PrizeTierCountAggregateOutputType | null
    _avg: PrizeTierAvgAggregateOutputType | null
    _sum: PrizeTierSumAggregateOutputType | null
    _min: PrizeTierMinAggregateOutputType | null
    _max: PrizeTierMaxAggregateOutputType | null
  }

  type GetPrizeTierGroupByPayload<T extends PrizeTierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrizeTierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrizeTierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrizeTierGroupByOutputType[P]>
            : GetScalarType<T[P], PrizeTierGroupByOutputType[P]>
        }
      >
    >


  export type PrizeTierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    start_prize?: boolean
    end_prize?: boolean
    description?: boolean
    payout_rules?: boolean | PrizeTier$payout_rulesArgs<ExtArgs>
    bets?: boolean | PrizeTier$betsArgs<ExtArgs>
    _count?: boolean | PrizeTierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prizeTier"]>

  export type PrizeTierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    start_prize?: boolean
    end_prize?: boolean
    description?: boolean
  }, ExtArgs["result"]["prizeTier"]>

  export type PrizeTierSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    start_prize?: boolean
    end_prize?: boolean
    description?: boolean
  }, ExtArgs["result"]["prizeTier"]>

  export type PrizeTierSelectScalar = {
    id?: boolean
    name?: boolean
    start_prize?: boolean
    end_prize?: boolean
    description?: boolean
  }

  export type PrizeTierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "start_prize" | "end_prize" | "description", ExtArgs["result"]["prizeTier"]>
  export type PrizeTierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payout_rules?: boolean | PrizeTier$payout_rulesArgs<ExtArgs>
    bets?: boolean | PrizeTier$betsArgs<ExtArgs>
    _count?: boolean | PrizeTierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrizeTierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PrizeTierIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PrizeTierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrizeTier"
    objects: {
      payout_rules: Prisma.$PayoutRulePayload<ExtArgs>[]
      bets: Prisma.$BetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      start_prize: number
      end_prize: number
      description: string | null
    }, ExtArgs["result"]["prizeTier"]>
    composites: {}
  }

  type PrizeTierGetPayload<S extends boolean | null | undefined | PrizeTierDefaultArgs> = $Result.GetResult<Prisma.$PrizeTierPayload, S>

  type PrizeTierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrizeTierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrizeTierCountAggregateInputType | true
    }

  export interface PrizeTierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrizeTier'], meta: { name: 'PrizeTier' } }
    /**
     * Find zero or one PrizeTier that matches the filter.
     * @param {PrizeTierFindUniqueArgs} args - Arguments to find a PrizeTier
     * @example
     * // Get one PrizeTier
     * const prizeTier = await prisma.prizeTier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrizeTierFindUniqueArgs>(args: SelectSubset<T, PrizeTierFindUniqueArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrizeTier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrizeTierFindUniqueOrThrowArgs} args - Arguments to find a PrizeTier
     * @example
     * // Get one PrizeTier
     * const prizeTier = await prisma.prizeTier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrizeTierFindUniqueOrThrowArgs>(args: SelectSubset<T, PrizeTierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrizeTier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierFindFirstArgs} args - Arguments to find a PrizeTier
     * @example
     * // Get one PrizeTier
     * const prizeTier = await prisma.prizeTier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrizeTierFindFirstArgs>(args?: SelectSubset<T, PrizeTierFindFirstArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrizeTier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierFindFirstOrThrowArgs} args - Arguments to find a PrizeTier
     * @example
     * // Get one PrizeTier
     * const prizeTier = await prisma.prizeTier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrizeTierFindFirstOrThrowArgs>(args?: SelectSubset<T, PrizeTierFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrizeTiers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrizeTiers
     * const prizeTiers = await prisma.prizeTier.findMany()
     * 
     * // Get first 10 PrizeTiers
     * const prizeTiers = await prisma.prizeTier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prizeTierWithIdOnly = await prisma.prizeTier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrizeTierFindManyArgs>(args?: SelectSubset<T, PrizeTierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrizeTier.
     * @param {PrizeTierCreateArgs} args - Arguments to create a PrizeTier.
     * @example
     * // Create one PrizeTier
     * const PrizeTier = await prisma.prizeTier.create({
     *   data: {
     *     // ... data to create a PrizeTier
     *   }
     * })
     * 
     */
    create<T extends PrizeTierCreateArgs>(args: SelectSubset<T, PrizeTierCreateArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrizeTiers.
     * @param {PrizeTierCreateManyArgs} args - Arguments to create many PrizeTiers.
     * @example
     * // Create many PrizeTiers
     * const prizeTier = await prisma.prizeTier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrizeTierCreateManyArgs>(args?: SelectSubset<T, PrizeTierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrizeTiers and returns the data saved in the database.
     * @param {PrizeTierCreateManyAndReturnArgs} args - Arguments to create many PrizeTiers.
     * @example
     * // Create many PrizeTiers
     * const prizeTier = await prisma.prizeTier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrizeTiers and only return the `id`
     * const prizeTierWithIdOnly = await prisma.prizeTier.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrizeTierCreateManyAndReturnArgs>(args?: SelectSubset<T, PrizeTierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrizeTier.
     * @param {PrizeTierDeleteArgs} args - Arguments to delete one PrizeTier.
     * @example
     * // Delete one PrizeTier
     * const PrizeTier = await prisma.prizeTier.delete({
     *   where: {
     *     // ... filter to delete one PrizeTier
     *   }
     * })
     * 
     */
    delete<T extends PrizeTierDeleteArgs>(args: SelectSubset<T, PrizeTierDeleteArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrizeTier.
     * @param {PrizeTierUpdateArgs} args - Arguments to update one PrizeTier.
     * @example
     * // Update one PrizeTier
     * const prizeTier = await prisma.prizeTier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrizeTierUpdateArgs>(args: SelectSubset<T, PrizeTierUpdateArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrizeTiers.
     * @param {PrizeTierDeleteManyArgs} args - Arguments to filter PrizeTiers to delete.
     * @example
     * // Delete a few PrizeTiers
     * const { count } = await prisma.prizeTier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrizeTierDeleteManyArgs>(args?: SelectSubset<T, PrizeTierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrizeTiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrizeTiers
     * const prizeTier = await prisma.prizeTier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrizeTierUpdateManyArgs>(args: SelectSubset<T, PrizeTierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrizeTiers and returns the data updated in the database.
     * @param {PrizeTierUpdateManyAndReturnArgs} args - Arguments to update many PrizeTiers.
     * @example
     * // Update many PrizeTiers
     * const prizeTier = await prisma.prizeTier.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrizeTiers and only return the `id`
     * const prizeTierWithIdOnly = await prisma.prizeTier.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrizeTierUpdateManyAndReturnArgs>(args: SelectSubset<T, PrizeTierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrizeTier.
     * @param {PrizeTierUpsertArgs} args - Arguments to update or create a PrizeTier.
     * @example
     * // Update or create a PrizeTier
     * const prizeTier = await prisma.prizeTier.upsert({
     *   create: {
     *     // ... data to create a PrizeTier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrizeTier we want to update
     *   }
     * })
     */
    upsert<T extends PrizeTierUpsertArgs>(args: SelectSubset<T, PrizeTierUpsertArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrizeTiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierCountArgs} args - Arguments to filter PrizeTiers to count.
     * @example
     * // Count the number of PrizeTiers
     * const count = await prisma.prizeTier.count({
     *   where: {
     *     // ... the filter for the PrizeTiers we want to count
     *   }
     * })
    **/
    count<T extends PrizeTierCountArgs>(
      args?: Subset<T, PrizeTierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrizeTierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrizeTier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrizeTierAggregateArgs>(args: Subset<T, PrizeTierAggregateArgs>): Prisma.PrismaPromise<GetPrizeTierAggregateType<T>>

    /**
     * Group by PrizeTier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrizeTierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrizeTierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrizeTierGroupByArgs['orderBy'] }
        : { orderBy?: PrizeTierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrizeTierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrizeTierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrizeTier model
   */
  readonly fields: PrizeTierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrizeTier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrizeTierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payout_rules<T extends PrizeTier$payout_rulesArgs<ExtArgs> = {}>(args?: Subset<T, PrizeTier$payout_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bets<T extends PrizeTier$betsArgs<ExtArgs> = {}>(args?: Subset<T, PrizeTier$betsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrizeTier model
   */
  interface PrizeTierFieldRefs {
    readonly id: FieldRef<"PrizeTier", 'Int'>
    readonly name: FieldRef<"PrizeTier", 'String'>
    readonly start_prize: FieldRef<"PrizeTier", 'Int'>
    readonly end_prize: FieldRef<"PrizeTier", 'Int'>
    readonly description: FieldRef<"PrizeTier", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PrizeTier findUnique
   */
  export type PrizeTierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter, which PrizeTier to fetch.
     */
    where: PrizeTierWhereUniqueInput
  }

  /**
   * PrizeTier findUniqueOrThrow
   */
  export type PrizeTierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter, which PrizeTier to fetch.
     */
    where: PrizeTierWhereUniqueInput
  }

  /**
   * PrizeTier findFirst
   */
  export type PrizeTierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter, which PrizeTier to fetch.
     */
    where?: PrizeTierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrizeTiers to fetch.
     */
    orderBy?: PrizeTierOrderByWithRelationInput | PrizeTierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrizeTiers.
     */
    cursor?: PrizeTierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrizeTiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrizeTiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrizeTiers.
     */
    distinct?: PrizeTierScalarFieldEnum | PrizeTierScalarFieldEnum[]
  }

  /**
   * PrizeTier findFirstOrThrow
   */
  export type PrizeTierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter, which PrizeTier to fetch.
     */
    where?: PrizeTierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrizeTiers to fetch.
     */
    orderBy?: PrizeTierOrderByWithRelationInput | PrizeTierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrizeTiers.
     */
    cursor?: PrizeTierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrizeTiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrizeTiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrizeTiers.
     */
    distinct?: PrizeTierScalarFieldEnum | PrizeTierScalarFieldEnum[]
  }

  /**
   * PrizeTier findMany
   */
  export type PrizeTierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter, which PrizeTiers to fetch.
     */
    where?: PrizeTierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrizeTiers to fetch.
     */
    orderBy?: PrizeTierOrderByWithRelationInput | PrizeTierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrizeTiers.
     */
    cursor?: PrizeTierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrizeTiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrizeTiers.
     */
    skip?: number
    distinct?: PrizeTierScalarFieldEnum | PrizeTierScalarFieldEnum[]
  }

  /**
   * PrizeTier create
   */
  export type PrizeTierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * The data needed to create a PrizeTier.
     */
    data: XOR<PrizeTierCreateInput, PrizeTierUncheckedCreateInput>
  }

  /**
   * PrizeTier createMany
   */
  export type PrizeTierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrizeTiers.
     */
    data: PrizeTierCreateManyInput | PrizeTierCreateManyInput[]
  }

  /**
   * PrizeTier createManyAndReturn
   */
  export type PrizeTierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * The data used to create many PrizeTiers.
     */
    data: PrizeTierCreateManyInput | PrizeTierCreateManyInput[]
  }

  /**
   * PrizeTier update
   */
  export type PrizeTierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * The data needed to update a PrizeTier.
     */
    data: XOR<PrizeTierUpdateInput, PrizeTierUncheckedUpdateInput>
    /**
     * Choose, which PrizeTier to update.
     */
    where: PrizeTierWhereUniqueInput
  }

  /**
   * PrizeTier updateMany
   */
  export type PrizeTierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrizeTiers.
     */
    data: XOR<PrizeTierUpdateManyMutationInput, PrizeTierUncheckedUpdateManyInput>
    /**
     * Filter which PrizeTiers to update
     */
    where?: PrizeTierWhereInput
    /**
     * Limit how many PrizeTiers to update.
     */
    limit?: number
  }

  /**
   * PrizeTier updateManyAndReturn
   */
  export type PrizeTierUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * The data used to update PrizeTiers.
     */
    data: XOR<PrizeTierUpdateManyMutationInput, PrizeTierUncheckedUpdateManyInput>
    /**
     * Filter which PrizeTiers to update
     */
    where?: PrizeTierWhereInput
    /**
     * Limit how many PrizeTiers to update.
     */
    limit?: number
  }

  /**
   * PrizeTier upsert
   */
  export type PrizeTierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * The filter to search for the PrizeTier to update in case it exists.
     */
    where: PrizeTierWhereUniqueInput
    /**
     * In case the PrizeTier found by the `where` argument doesn't exist, create a new PrizeTier with this data.
     */
    create: XOR<PrizeTierCreateInput, PrizeTierUncheckedCreateInput>
    /**
     * In case the PrizeTier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrizeTierUpdateInput, PrizeTierUncheckedUpdateInput>
  }

  /**
   * PrizeTier delete
   */
  export type PrizeTierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
    /**
     * Filter which PrizeTier to delete.
     */
    where: PrizeTierWhereUniqueInput
  }

  /**
   * PrizeTier deleteMany
   */
  export type PrizeTierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrizeTiers to delete
     */
    where?: PrizeTierWhereInput
    /**
     * Limit how many PrizeTiers to delete.
     */
    limit?: number
  }

  /**
   * PrizeTier.payout_rules
   */
  export type PrizeTier$payout_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    where?: PayoutRuleWhereInput
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    cursor?: PayoutRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayoutRuleScalarFieldEnum | PayoutRuleScalarFieldEnum[]
  }

  /**
   * PrizeTier.bets
   */
  export type PrizeTier$betsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    where?: BetWhereInput
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    cursor?: BetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * PrizeTier without action
   */
  export type PrizeTierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrizeTier
     */
    select?: PrizeTierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrizeTier
     */
    omit?: PrizeTierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrizeTierInclude<ExtArgs> | null
  }


  /**
   * Model DrawSchedule
   */

  export type AggregateDrawSchedule = {
    _count: DrawScheduleCountAggregateOutputType | null
    _avg: DrawScheduleAvgAggregateOutputType | null
    _sum: DrawScheduleSumAggregateOutputType | null
    _min: DrawScheduleMinAggregateOutputType | null
    _max: DrawScheduleMaxAggregateOutputType | null
  }

  export type DrawScheduleAvgAggregateOutputType = {
    id: number | null
  }

  export type DrawScheduleSumAggregateOutputType = {
    id: number | null
  }

  export type DrawScheduleMinAggregateOutputType = {
    id: number | null
    name: string | null
    draw_time: string | null
    bet_close_time: string | null
  }

  export type DrawScheduleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    draw_time: string | null
    bet_close_time: string | null
  }

  export type DrawScheduleCountAggregateOutputType = {
    id: number
    name: number
    draw_time: number
    bet_close_time: number
    _all: number
  }


  export type DrawScheduleAvgAggregateInputType = {
    id?: true
  }

  export type DrawScheduleSumAggregateInputType = {
    id?: true
  }

  export type DrawScheduleMinAggregateInputType = {
    id?: true
    name?: true
    draw_time?: true
    bet_close_time?: true
  }

  export type DrawScheduleMaxAggregateInputType = {
    id?: true
    name?: true
    draw_time?: true
    bet_close_time?: true
  }

  export type DrawScheduleCountAggregateInputType = {
    id?: true
    name?: true
    draw_time?: true
    bet_close_time?: true
    _all?: true
  }

  export type DrawScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DrawSchedule to aggregate.
     */
    where?: DrawScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawSchedules to fetch.
     */
    orderBy?: DrawScheduleOrderByWithRelationInput | DrawScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DrawScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DrawSchedules
    **/
    _count?: true | DrawScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DrawScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DrawScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DrawScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DrawScheduleMaxAggregateInputType
  }

  export type GetDrawScheduleAggregateType<T extends DrawScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateDrawSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrawSchedule[P]>
      : GetScalarType<T[P], AggregateDrawSchedule[P]>
  }




  export type DrawScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrawScheduleWhereInput
    orderBy?: DrawScheduleOrderByWithAggregationInput | DrawScheduleOrderByWithAggregationInput[]
    by: DrawScheduleScalarFieldEnum[] | DrawScheduleScalarFieldEnum
    having?: DrawScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DrawScheduleCountAggregateInputType | true
    _avg?: DrawScheduleAvgAggregateInputType
    _sum?: DrawScheduleSumAggregateInputType
    _min?: DrawScheduleMinAggregateInputType
    _max?: DrawScheduleMaxAggregateInputType
  }

  export type DrawScheduleGroupByOutputType = {
    id: number
    name: string
    draw_time: string
    bet_close_time: string
    _count: DrawScheduleCountAggregateOutputType | null
    _avg: DrawScheduleAvgAggregateOutputType | null
    _sum: DrawScheduleSumAggregateOutputType | null
    _min: DrawScheduleMinAggregateOutputType | null
    _max: DrawScheduleMaxAggregateOutputType | null
  }

  type GetDrawScheduleGroupByPayload<T extends DrawScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DrawScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DrawScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DrawScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], DrawScheduleGroupByOutputType[P]>
        }
      >
    >


  export type DrawScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    draw_time?: boolean
    bet_close_time?: boolean
    draw_results?: boolean | DrawSchedule$draw_resultsArgs<ExtArgs>
    _count?: boolean | DrawScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawSchedule"]>

  export type DrawScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    draw_time?: boolean
    bet_close_time?: boolean
  }, ExtArgs["result"]["drawSchedule"]>

  export type DrawScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    draw_time?: boolean
    bet_close_time?: boolean
  }, ExtArgs["result"]["drawSchedule"]>

  export type DrawScheduleSelectScalar = {
    id?: boolean
    name?: boolean
    draw_time?: boolean
    bet_close_time?: boolean
  }

  export type DrawScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "draw_time" | "bet_close_time", ExtArgs["result"]["drawSchedule"]>
  export type DrawScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draw_results?: boolean | DrawSchedule$draw_resultsArgs<ExtArgs>
    _count?: boolean | DrawScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DrawScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DrawScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DrawSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DrawSchedule"
    objects: {
      draw_results: Prisma.$DrawResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      draw_time: string
      bet_close_time: string
    }, ExtArgs["result"]["drawSchedule"]>
    composites: {}
  }

  type DrawScheduleGetPayload<S extends boolean | null | undefined | DrawScheduleDefaultArgs> = $Result.GetResult<Prisma.$DrawSchedulePayload, S>

  type DrawScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DrawScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DrawScheduleCountAggregateInputType | true
    }

  export interface DrawScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DrawSchedule'], meta: { name: 'DrawSchedule' } }
    /**
     * Find zero or one DrawSchedule that matches the filter.
     * @param {DrawScheduleFindUniqueArgs} args - Arguments to find a DrawSchedule
     * @example
     * // Get one DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DrawScheduleFindUniqueArgs>(args: SelectSubset<T, DrawScheduleFindUniqueArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DrawSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DrawScheduleFindUniqueOrThrowArgs} args - Arguments to find a DrawSchedule
     * @example
     * // Get one DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DrawScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, DrawScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DrawSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleFindFirstArgs} args - Arguments to find a DrawSchedule
     * @example
     * // Get one DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DrawScheduleFindFirstArgs>(args?: SelectSubset<T, DrawScheduleFindFirstArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DrawSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleFindFirstOrThrowArgs} args - Arguments to find a DrawSchedule
     * @example
     * // Get one DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DrawScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, DrawScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DrawSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DrawSchedules
     * const drawSchedules = await prisma.drawSchedule.findMany()
     * 
     * // Get first 10 DrawSchedules
     * const drawSchedules = await prisma.drawSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drawScheduleWithIdOnly = await prisma.drawSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DrawScheduleFindManyArgs>(args?: SelectSubset<T, DrawScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DrawSchedule.
     * @param {DrawScheduleCreateArgs} args - Arguments to create a DrawSchedule.
     * @example
     * // Create one DrawSchedule
     * const DrawSchedule = await prisma.drawSchedule.create({
     *   data: {
     *     // ... data to create a DrawSchedule
     *   }
     * })
     * 
     */
    create<T extends DrawScheduleCreateArgs>(args: SelectSubset<T, DrawScheduleCreateArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DrawSchedules.
     * @param {DrawScheduleCreateManyArgs} args - Arguments to create many DrawSchedules.
     * @example
     * // Create many DrawSchedules
     * const drawSchedule = await prisma.drawSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DrawScheduleCreateManyArgs>(args?: SelectSubset<T, DrawScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DrawSchedules and returns the data saved in the database.
     * @param {DrawScheduleCreateManyAndReturnArgs} args - Arguments to create many DrawSchedules.
     * @example
     * // Create many DrawSchedules
     * const drawSchedule = await prisma.drawSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DrawSchedules and only return the `id`
     * const drawScheduleWithIdOnly = await prisma.drawSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DrawScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, DrawScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DrawSchedule.
     * @param {DrawScheduleDeleteArgs} args - Arguments to delete one DrawSchedule.
     * @example
     * // Delete one DrawSchedule
     * const DrawSchedule = await prisma.drawSchedule.delete({
     *   where: {
     *     // ... filter to delete one DrawSchedule
     *   }
     * })
     * 
     */
    delete<T extends DrawScheduleDeleteArgs>(args: SelectSubset<T, DrawScheduleDeleteArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DrawSchedule.
     * @param {DrawScheduleUpdateArgs} args - Arguments to update one DrawSchedule.
     * @example
     * // Update one DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DrawScheduleUpdateArgs>(args: SelectSubset<T, DrawScheduleUpdateArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DrawSchedules.
     * @param {DrawScheduleDeleteManyArgs} args - Arguments to filter DrawSchedules to delete.
     * @example
     * // Delete a few DrawSchedules
     * const { count } = await prisma.drawSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DrawScheduleDeleteManyArgs>(args?: SelectSubset<T, DrawScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DrawSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DrawSchedules
     * const drawSchedule = await prisma.drawSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DrawScheduleUpdateManyArgs>(args: SelectSubset<T, DrawScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DrawSchedules and returns the data updated in the database.
     * @param {DrawScheduleUpdateManyAndReturnArgs} args - Arguments to update many DrawSchedules.
     * @example
     * // Update many DrawSchedules
     * const drawSchedule = await prisma.drawSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DrawSchedules and only return the `id`
     * const drawScheduleWithIdOnly = await prisma.drawSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DrawScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, DrawScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DrawSchedule.
     * @param {DrawScheduleUpsertArgs} args - Arguments to update or create a DrawSchedule.
     * @example
     * // Update or create a DrawSchedule
     * const drawSchedule = await prisma.drawSchedule.upsert({
     *   create: {
     *     // ... data to create a DrawSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DrawSchedule we want to update
     *   }
     * })
     */
    upsert<T extends DrawScheduleUpsertArgs>(args: SelectSubset<T, DrawScheduleUpsertArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DrawSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleCountArgs} args - Arguments to filter DrawSchedules to count.
     * @example
     * // Count the number of DrawSchedules
     * const count = await prisma.drawSchedule.count({
     *   where: {
     *     // ... the filter for the DrawSchedules we want to count
     *   }
     * })
    **/
    count<T extends DrawScheduleCountArgs>(
      args?: Subset<T, DrawScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DrawScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DrawSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DrawScheduleAggregateArgs>(args: Subset<T, DrawScheduleAggregateArgs>): Prisma.PrismaPromise<GetDrawScheduleAggregateType<T>>

    /**
     * Group by DrawSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DrawScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DrawScheduleGroupByArgs['orderBy'] }
        : { orderBy?: DrawScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DrawScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrawScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DrawSchedule model
   */
  readonly fields: DrawScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DrawSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DrawScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    draw_results<T extends DrawSchedule$draw_resultsArgs<ExtArgs> = {}>(args?: Subset<T, DrawSchedule$draw_resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DrawSchedule model
   */
  interface DrawScheduleFieldRefs {
    readonly id: FieldRef<"DrawSchedule", 'Int'>
    readonly name: FieldRef<"DrawSchedule", 'String'>
    readonly draw_time: FieldRef<"DrawSchedule", 'String'>
    readonly bet_close_time: FieldRef<"DrawSchedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DrawSchedule findUnique
   */
  export type DrawScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DrawSchedule to fetch.
     */
    where: DrawScheduleWhereUniqueInput
  }

  /**
   * DrawSchedule findUniqueOrThrow
   */
  export type DrawScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DrawSchedule to fetch.
     */
    where: DrawScheduleWhereUniqueInput
  }

  /**
   * DrawSchedule findFirst
   */
  export type DrawScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DrawSchedule to fetch.
     */
    where?: DrawScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawSchedules to fetch.
     */
    orderBy?: DrawScheduleOrderByWithRelationInput | DrawScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DrawSchedules.
     */
    cursor?: DrawScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DrawSchedules.
     */
    distinct?: DrawScheduleScalarFieldEnum | DrawScheduleScalarFieldEnum[]
  }

  /**
   * DrawSchedule findFirstOrThrow
   */
  export type DrawScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DrawSchedule to fetch.
     */
    where?: DrawScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawSchedules to fetch.
     */
    orderBy?: DrawScheduleOrderByWithRelationInput | DrawScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DrawSchedules.
     */
    cursor?: DrawScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DrawSchedules.
     */
    distinct?: DrawScheduleScalarFieldEnum | DrawScheduleScalarFieldEnum[]
  }

  /**
   * DrawSchedule findMany
   */
  export type DrawScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DrawSchedules to fetch.
     */
    where?: DrawScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawSchedules to fetch.
     */
    orderBy?: DrawScheduleOrderByWithRelationInput | DrawScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DrawSchedules.
     */
    cursor?: DrawScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawSchedules.
     */
    skip?: number
    distinct?: DrawScheduleScalarFieldEnum | DrawScheduleScalarFieldEnum[]
  }

  /**
   * DrawSchedule create
   */
  export type DrawScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a DrawSchedule.
     */
    data: XOR<DrawScheduleCreateInput, DrawScheduleUncheckedCreateInput>
  }

  /**
   * DrawSchedule createMany
   */
  export type DrawScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DrawSchedules.
     */
    data: DrawScheduleCreateManyInput | DrawScheduleCreateManyInput[]
  }

  /**
   * DrawSchedule createManyAndReturn
   */
  export type DrawScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many DrawSchedules.
     */
    data: DrawScheduleCreateManyInput | DrawScheduleCreateManyInput[]
  }

  /**
   * DrawSchedule update
   */
  export type DrawScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a DrawSchedule.
     */
    data: XOR<DrawScheduleUpdateInput, DrawScheduleUncheckedUpdateInput>
    /**
     * Choose, which DrawSchedule to update.
     */
    where: DrawScheduleWhereUniqueInput
  }

  /**
   * DrawSchedule updateMany
   */
  export type DrawScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DrawSchedules.
     */
    data: XOR<DrawScheduleUpdateManyMutationInput, DrawScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DrawSchedules to update
     */
    where?: DrawScheduleWhereInput
    /**
     * Limit how many DrawSchedules to update.
     */
    limit?: number
  }

  /**
   * DrawSchedule updateManyAndReturn
   */
  export type DrawScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * The data used to update DrawSchedules.
     */
    data: XOR<DrawScheduleUpdateManyMutationInput, DrawScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DrawSchedules to update
     */
    where?: DrawScheduleWhereInput
    /**
     * Limit how many DrawSchedules to update.
     */
    limit?: number
  }

  /**
   * DrawSchedule upsert
   */
  export type DrawScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the DrawSchedule to update in case it exists.
     */
    where: DrawScheduleWhereUniqueInput
    /**
     * In case the DrawSchedule found by the `where` argument doesn't exist, create a new DrawSchedule with this data.
     */
    create: XOR<DrawScheduleCreateInput, DrawScheduleUncheckedCreateInput>
    /**
     * In case the DrawSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DrawScheduleUpdateInput, DrawScheduleUncheckedUpdateInput>
  }

  /**
   * DrawSchedule delete
   */
  export type DrawScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
    /**
     * Filter which DrawSchedule to delete.
     */
    where: DrawScheduleWhereUniqueInput
  }

  /**
   * DrawSchedule deleteMany
   */
  export type DrawScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DrawSchedules to delete
     */
    where?: DrawScheduleWhereInput
    /**
     * Limit how many DrawSchedules to delete.
     */
    limit?: number
  }

  /**
   * DrawSchedule.draw_results
   */
  export type DrawSchedule$draw_resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    where?: DrawResultWhereInput
    orderBy?: DrawResultOrderByWithRelationInput | DrawResultOrderByWithRelationInput[]
    cursor?: DrawResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DrawResultScalarFieldEnum | DrawResultScalarFieldEnum[]
  }

  /**
   * DrawSchedule without action
   */
  export type DrawScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawSchedule
     */
    select?: DrawScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawSchedule
     */
    omit?: DrawScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawScheduleInclude<ExtArgs> | null
  }


  /**
   * Model BetType
   */

  export type AggregateBetType = {
    _count: BetTypeCountAggregateOutputType | null
    _avg: BetTypeAvgAggregateOutputType | null
    _sum: BetTypeSumAggregateOutputType | null
    _min: BetTypeMinAggregateOutputType | null
    _max: BetTypeMaxAggregateOutputType | null
  }

  export type BetTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type BetTypeSumAggregateOutputType = {
    id: number | null
  }

  export type BetTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BetTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BetTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BetTypeAvgAggregateInputType = {
    id?: true
  }

  export type BetTypeSumAggregateInputType = {
    id?: true
  }

  export type BetTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BetTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BetTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BetTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BetType to aggregate.
     */
    where?: BetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BetTypes to fetch.
     */
    orderBy?: BetTypeOrderByWithRelationInput | BetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BetTypes
    **/
    _count?: true | BetTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BetTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BetTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BetTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BetTypeMaxAggregateInputType
  }

  export type GetBetTypeAggregateType<T extends BetTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateBetType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBetType[P]>
      : GetScalarType<T[P], AggregateBetType[P]>
  }




  export type BetTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetTypeWhereInput
    orderBy?: BetTypeOrderByWithAggregationInput | BetTypeOrderByWithAggregationInput[]
    by: BetTypeScalarFieldEnum[] | BetTypeScalarFieldEnum
    having?: BetTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BetTypeCountAggregateInputType | true
    _avg?: BetTypeAvgAggregateInputType
    _sum?: BetTypeSumAggregateInputType
    _min?: BetTypeMinAggregateInputType
    _max?: BetTypeMaxAggregateInputType
  }

  export type BetTypeGroupByOutputType = {
    id: number
    name: string
    _count: BetTypeCountAggregateOutputType | null
    _avg: BetTypeAvgAggregateOutputType | null
    _sum: BetTypeSumAggregateOutputType | null
    _min: BetTypeMinAggregateOutputType | null
    _max: BetTypeMaxAggregateOutputType | null
  }

  type GetBetTypeGroupByPayload<T extends BetTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BetTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BetTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BetTypeGroupByOutputType[P]>
            : GetScalarType<T[P], BetTypeGroupByOutputType[P]>
        }
      >
    >


  export type BetTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    payout_rules?: boolean | BetType$payout_rulesArgs<ExtArgs>
    bets?: boolean | BetType$betsArgs<ExtArgs>
    _count?: boolean | BetTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["betType"]>

  export type BetTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["betType"]>

  export type BetTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["betType"]>

  export type BetTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type BetTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["betType"]>
  export type BetTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payout_rules?: boolean | BetType$payout_rulesArgs<ExtArgs>
    bets?: boolean | BetType$betsArgs<ExtArgs>
    _count?: boolean | BetTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BetTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BetTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BetTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BetType"
    objects: {
      payout_rules: Prisma.$PayoutRulePayload<ExtArgs>[]
      bets: Prisma.$BetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["betType"]>
    composites: {}
  }

  type BetTypeGetPayload<S extends boolean | null | undefined | BetTypeDefaultArgs> = $Result.GetResult<Prisma.$BetTypePayload, S>

  type BetTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BetTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BetTypeCountAggregateInputType | true
    }

  export interface BetTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BetType'], meta: { name: 'BetType' } }
    /**
     * Find zero or one BetType that matches the filter.
     * @param {BetTypeFindUniqueArgs} args - Arguments to find a BetType
     * @example
     * // Get one BetType
     * const betType = await prisma.betType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BetTypeFindUniqueArgs>(args: SelectSubset<T, BetTypeFindUniqueArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BetType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BetTypeFindUniqueOrThrowArgs} args - Arguments to find a BetType
     * @example
     * // Get one BetType
     * const betType = await prisma.betType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BetTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, BetTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BetType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeFindFirstArgs} args - Arguments to find a BetType
     * @example
     * // Get one BetType
     * const betType = await prisma.betType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BetTypeFindFirstArgs>(args?: SelectSubset<T, BetTypeFindFirstArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BetType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeFindFirstOrThrowArgs} args - Arguments to find a BetType
     * @example
     * // Get one BetType
     * const betType = await prisma.betType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BetTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, BetTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BetTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BetTypes
     * const betTypes = await prisma.betType.findMany()
     * 
     * // Get first 10 BetTypes
     * const betTypes = await prisma.betType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const betTypeWithIdOnly = await prisma.betType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BetTypeFindManyArgs>(args?: SelectSubset<T, BetTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BetType.
     * @param {BetTypeCreateArgs} args - Arguments to create a BetType.
     * @example
     * // Create one BetType
     * const BetType = await prisma.betType.create({
     *   data: {
     *     // ... data to create a BetType
     *   }
     * })
     * 
     */
    create<T extends BetTypeCreateArgs>(args: SelectSubset<T, BetTypeCreateArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BetTypes.
     * @param {BetTypeCreateManyArgs} args - Arguments to create many BetTypes.
     * @example
     * // Create many BetTypes
     * const betType = await prisma.betType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BetTypeCreateManyArgs>(args?: SelectSubset<T, BetTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BetTypes and returns the data saved in the database.
     * @param {BetTypeCreateManyAndReturnArgs} args - Arguments to create many BetTypes.
     * @example
     * // Create many BetTypes
     * const betType = await prisma.betType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BetTypes and only return the `id`
     * const betTypeWithIdOnly = await prisma.betType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BetTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, BetTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BetType.
     * @param {BetTypeDeleteArgs} args - Arguments to delete one BetType.
     * @example
     * // Delete one BetType
     * const BetType = await prisma.betType.delete({
     *   where: {
     *     // ... filter to delete one BetType
     *   }
     * })
     * 
     */
    delete<T extends BetTypeDeleteArgs>(args: SelectSubset<T, BetTypeDeleteArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BetType.
     * @param {BetTypeUpdateArgs} args - Arguments to update one BetType.
     * @example
     * // Update one BetType
     * const betType = await prisma.betType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BetTypeUpdateArgs>(args: SelectSubset<T, BetTypeUpdateArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BetTypes.
     * @param {BetTypeDeleteManyArgs} args - Arguments to filter BetTypes to delete.
     * @example
     * // Delete a few BetTypes
     * const { count } = await prisma.betType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BetTypeDeleteManyArgs>(args?: SelectSubset<T, BetTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BetTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BetTypes
     * const betType = await prisma.betType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BetTypeUpdateManyArgs>(args: SelectSubset<T, BetTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BetTypes and returns the data updated in the database.
     * @param {BetTypeUpdateManyAndReturnArgs} args - Arguments to update many BetTypes.
     * @example
     * // Update many BetTypes
     * const betType = await prisma.betType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BetTypes and only return the `id`
     * const betTypeWithIdOnly = await prisma.betType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BetTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, BetTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BetType.
     * @param {BetTypeUpsertArgs} args - Arguments to update or create a BetType.
     * @example
     * // Update or create a BetType
     * const betType = await prisma.betType.upsert({
     *   create: {
     *     // ... data to create a BetType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BetType we want to update
     *   }
     * })
     */
    upsert<T extends BetTypeUpsertArgs>(args: SelectSubset<T, BetTypeUpsertArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BetTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeCountArgs} args - Arguments to filter BetTypes to count.
     * @example
     * // Count the number of BetTypes
     * const count = await prisma.betType.count({
     *   where: {
     *     // ... the filter for the BetTypes we want to count
     *   }
     * })
    **/
    count<T extends BetTypeCountArgs>(
      args?: Subset<T, BetTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BetTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BetType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BetTypeAggregateArgs>(args: Subset<T, BetTypeAggregateArgs>): Prisma.PrismaPromise<GetBetTypeAggregateType<T>>

    /**
     * Group by BetType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BetTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BetTypeGroupByArgs['orderBy'] }
        : { orderBy?: BetTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BetTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BetType model
   */
  readonly fields: BetTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BetType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BetTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payout_rules<T extends BetType$payout_rulesArgs<ExtArgs> = {}>(args?: Subset<T, BetType$payout_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bets<T extends BetType$betsArgs<ExtArgs> = {}>(args?: Subset<T, BetType$betsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BetType model
   */
  interface BetTypeFieldRefs {
    readonly id: FieldRef<"BetType", 'Int'>
    readonly name: FieldRef<"BetType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BetType findUnique
   */
  export type BetTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter, which BetType to fetch.
     */
    where: BetTypeWhereUniqueInput
  }

  /**
   * BetType findUniqueOrThrow
   */
  export type BetTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter, which BetType to fetch.
     */
    where: BetTypeWhereUniqueInput
  }

  /**
   * BetType findFirst
   */
  export type BetTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter, which BetType to fetch.
     */
    where?: BetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BetTypes to fetch.
     */
    orderBy?: BetTypeOrderByWithRelationInput | BetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BetTypes.
     */
    cursor?: BetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BetTypes.
     */
    distinct?: BetTypeScalarFieldEnum | BetTypeScalarFieldEnum[]
  }

  /**
   * BetType findFirstOrThrow
   */
  export type BetTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter, which BetType to fetch.
     */
    where?: BetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BetTypes to fetch.
     */
    orderBy?: BetTypeOrderByWithRelationInput | BetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BetTypes.
     */
    cursor?: BetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BetTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BetTypes.
     */
    distinct?: BetTypeScalarFieldEnum | BetTypeScalarFieldEnum[]
  }

  /**
   * BetType findMany
   */
  export type BetTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter, which BetTypes to fetch.
     */
    where?: BetTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BetTypes to fetch.
     */
    orderBy?: BetTypeOrderByWithRelationInput | BetTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BetTypes.
     */
    cursor?: BetTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BetTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BetTypes.
     */
    skip?: number
    distinct?: BetTypeScalarFieldEnum | BetTypeScalarFieldEnum[]
  }

  /**
   * BetType create
   */
  export type BetTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a BetType.
     */
    data: XOR<BetTypeCreateInput, BetTypeUncheckedCreateInput>
  }

  /**
   * BetType createMany
   */
  export type BetTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BetTypes.
     */
    data: BetTypeCreateManyInput | BetTypeCreateManyInput[]
  }

  /**
   * BetType createManyAndReturn
   */
  export type BetTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * The data used to create many BetTypes.
     */
    data: BetTypeCreateManyInput | BetTypeCreateManyInput[]
  }

  /**
   * BetType update
   */
  export type BetTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a BetType.
     */
    data: XOR<BetTypeUpdateInput, BetTypeUncheckedUpdateInput>
    /**
     * Choose, which BetType to update.
     */
    where: BetTypeWhereUniqueInput
  }

  /**
   * BetType updateMany
   */
  export type BetTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BetTypes.
     */
    data: XOR<BetTypeUpdateManyMutationInput, BetTypeUncheckedUpdateManyInput>
    /**
     * Filter which BetTypes to update
     */
    where?: BetTypeWhereInput
    /**
     * Limit how many BetTypes to update.
     */
    limit?: number
  }

  /**
   * BetType updateManyAndReturn
   */
  export type BetTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * The data used to update BetTypes.
     */
    data: XOR<BetTypeUpdateManyMutationInput, BetTypeUncheckedUpdateManyInput>
    /**
     * Filter which BetTypes to update
     */
    where?: BetTypeWhereInput
    /**
     * Limit how many BetTypes to update.
     */
    limit?: number
  }

  /**
   * BetType upsert
   */
  export type BetTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the BetType to update in case it exists.
     */
    where: BetTypeWhereUniqueInput
    /**
     * In case the BetType found by the `where` argument doesn't exist, create a new BetType with this data.
     */
    create: XOR<BetTypeCreateInput, BetTypeUncheckedCreateInput>
    /**
     * In case the BetType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BetTypeUpdateInput, BetTypeUncheckedUpdateInput>
  }

  /**
   * BetType delete
   */
  export type BetTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
    /**
     * Filter which BetType to delete.
     */
    where: BetTypeWhereUniqueInput
  }

  /**
   * BetType deleteMany
   */
  export type BetTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BetTypes to delete
     */
    where?: BetTypeWhereInput
    /**
     * Limit how many BetTypes to delete.
     */
    limit?: number
  }

  /**
   * BetType.payout_rules
   */
  export type BetType$payout_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    where?: PayoutRuleWhereInput
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    cursor?: PayoutRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayoutRuleScalarFieldEnum | PayoutRuleScalarFieldEnum[]
  }

  /**
   * BetType.bets
   */
  export type BetType$betsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    where?: BetWhereInput
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    cursor?: BetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * BetType without action
   */
  export type BetTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BetType
     */
    select?: BetTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BetType
     */
    omit?: BetTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetTypeInclude<ExtArgs> | null
  }


  /**
   * Model PayoutRule
   */

  export type AggregatePayoutRule = {
    _count: PayoutRuleCountAggregateOutputType | null
    _avg: PayoutRuleAvgAggregateOutputType | null
    _sum: PayoutRuleSumAggregateOutputType | null
    _min: PayoutRuleMinAggregateOutputType | null
    _max: PayoutRuleMaxAggregateOutputType | null
  }

  export type PayoutRuleAvgAggregateOutputType = {
    id: number | null
    payout_rate: Decimal | null
    bet_type_id: number | null
    prize_tier_id: number | null
  }

  export type PayoutRuleSumAggregateOutputType = {
    id: number | null
    payout_rate: Decimal | null
    bet_type_id: number | null
    prize_tier_id: number | null
  }

  export type PayoutRuleMinAggregateOutputType = {
    id: number | null
    payout_rate: Decimal | null
    bet_type_id: number | null
    prize_tier_id: number | null
  }

  export type PayoutRuleMaxAggregateOutputType = {
    id: number | null
    payout_rate: Decimal | null
    bet_type_id: number | null
    prize_tier_id: number | null
  }

  export type PayoutRuleCountAggregateOutputType = {
    id: number
    payout_rate: number
    bet_type_id: number
    prize_tier_id: number
    _all: number
  }


  export type PayoutRuleAvgAggregateInputType = {
    id?: true
    payout_rate?: true
    bet_type_id?: true
    prize_tier_id?: true
  }

  export type PayoutRuleSumAggregateInputType = {
    id?: true
    payout_rate?: true
    bet_type_id?: true
    prize_tier_id?: true
  }

  export type PayoutRuleMinAggregateInputType = {
    id?: true
    payout_rate?: true
    bet_type_id?: true
    prize_tier_id?: true
  }

  export type PayoutRuleMaxAggregateInputType = {
    id?: true
    payout_rate?: true
    bet_type_id?: true
    prize_tier_id?: true
  }

  export type PayoutRuleCountAggregateInputType = {
    id?: true
    payout_rate?: true
    bet_type_id?: true
    prize_tier_id?: true
    _all?: true
  }

  export type PayoutRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayoutRule to aggregate.
     */
    where?: PayoutRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayoutRules to fetch.
     */
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayoutRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayoutRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayoutRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayoutRules
    **/
    _count?: true | PayoutRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayoutRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayoutRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayoutRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayoutRuleMaxAggregateInputType
  }

  export type GetPayoutRuleAggregateType<T extends PayoutRuleAggregateArgs> = {
        [P in keyof T & keyof AggregatePayoutRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayoutRule[P]>
      : GetScalarType<T[P], AggregatePayoutRule[P]>
  }




  export type PayoutRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayoutRuleWhereInput
    orderBy?: PayoutRuleOrderByWithAggregationInput | PayoutRuleOrderByWithAggregationInput[]
    by: PayoutRuleScalarFieldEnum[] | PayoutRuleScalarFieldEnum
    having?: PayoutRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayoutRuleCountAggregateInputType | true
    _avg?: PayoutRuleAvgAggregateInputType
    _sum?: PayoutRuleSumAggregateInputType
    _min?: PayoutRuleMinAggregateInputType
    _max?: PayoutRuleMaxAggregateInputType
  }

  export type PayoutRuleGroupByOutputType = {
    id: number
    payout_rate: Decimal
    bet_type_id: number
    prize_tier_id: number
    _count: PayoutRuleCountAggregateOutputType | null
    _avg: PayoutRuleAvgAggregateOutputType | null
    _sum: PayoutRuleSumAggregateOutputType | null
    _min: PayoutRuleMinAggregateOutputType | null
    _max: PayoutRuleMaxAggregateOutputType | null
  }

  type GetPayoutRuleGroupByPayload<T extends PayoutRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayoutRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayoutRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayoutRuleGroupByOutputType[P]>
            : GetScalarType<T[P], PayoutRuleGroupByOutputType[P]>
        }
      >
    >


  export type PayoutRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payout_rate?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payoutRule"]>

  export type PayoutRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payout_rate?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payoutRule"]>

  export type PayoutRuleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payout_rate?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payoutRule"]>

  export type PayoutRuleSelectScalar = {
    id?: boolean
    payout_rate?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
  }

  export type PayoutRuleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "payout_rate" | "bet_type_id" | "prize_tier_id", ExtArgs["result"]["payoutRule"]>
  export type PayoutRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }
  export type PayoutRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }
  export type PayoutRuleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
  }

  export type $PayoutRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayoutRule"
    objects: {
      bet_type: Prisma.$BetTypePayload<ExtArgs>
      prize_tier: Prisma.$PrizeTierPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      payout_rate: Prisma.Decimal
      bet_type_id: number
      prize_tier_id: number
    }, ExtArgs["result"]["payoutRule"]>
    composites: {}
  }

  type PayoutRuleGetPayload<S extends boolean | null | undefined | PayoutRuleDefaultArgs> = $Result.GetResult<Prisma.$PayoutRulePayload, S>

  type PayoutRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayoutRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayoutRuleCountAggregateInputType | true
    }

  export interface PayoutRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayoutRule'], meta: { name: 'PayoutRule' } }
    /**
     * Find zero or one PayoutRule that matches the filter.
     * @param {PayoutRuleFindUniqueArgs} args - Arguments to find a PayoutRule
     * @example
     * // Get one PayoutRule
     * const payoutRule = await prisma.payoutRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayoutRuleFindUniqueArgs>(args: SelectSubset<T, PayoutRuleFindUniqueArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayoutRule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayoutRuleFindUniqueOrThrowArgs} args - Arguments to find a PayoutRule
     * @example
     * // Get one PayoutRule
     * const payoutRule = await prisma.payoutRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayoutRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, PayoutRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayoutRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleFindFirstArgs} args - Arguments to find a PayoutRule
     * @example
     * // Get one PayoutRule
     * const payoutRule = await prisma.payoutRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayoutRuleFindFirstArgs>(args?: SelectSubset<T, PayoutRuleFindFirstArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayoutRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleFindFirstOrThrowArgs} args - Arguments to find a PayoutRule
     * @example
     * // Get one PayoutRule
     * const payoutRule = await prisma.payoutRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayoutRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, PayoutRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayoutRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayoutRules
     * const payoutRules = await prisma.payoutRule.findMany()
     * 
     * // Get first 10 PayoutRules
     * const payoutRules = await prisma.payoutRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payoutRuleWithIdOnly = await prisma.payoutRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayoutRuleFindManyArgs>(args?: SelectSubset<T, PayoutRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayoutRule.
     * @param {PayoutRuleCreateArgs} args - Arguments to create a PayoutRule.
     * @example
     * // Create one PayoutRule
     * const PayoutRule = await prisma.payoutRule.create({
     *   data: {
     *     // ... data to create a PayoutRule
     *   }
     * })
     * 
     */
    create<T extends PayoutRuleCreateArgs>(args: SelectSubset<T, PayoutRuleCreateArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayoutRules.
     * @param {PayoutRuleCreateManyArgs} args - Arguments to create many PayoutRules.
     * @example
     * // Create many PayoutRules
     * const payoutRule = await prisma.payoutRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayoutRuleCreateManyArgs>(args?: SelectSubset<T, PayoutRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayoutRules and returns the data saved in the database.
     * @param {PayoutRuleCreateManyAndReturnArgs} args - Arguments to create many PayoutRules.
     * @example
     * // Create many PayoutRules
     * const payoutRule = await prisma.payoutRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayoutRules and only return the `id`
     * const payoutRuleWithIdOnly = await prisma.payoutRule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayoutRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, PayoutRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayoutRule.
     * @param {PayoutRuleDeleteArgs} args - Arguments to delete one PayoutRule.
     * @example
     * // Delete one PayoutRule
     * const PayoutRule = await prisma.payoutRule.delete({
     *   where: {
     *     // ... filter to delete one PayoutRule
     *   }
     * })
     * 
     */
    delete<T extends PayoutRuleDeleteArgs>(args: SelectSubset<T, PayoutRuleDeleteArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayoutRule.
     * @param {PayoutRuleUpdateArgs} args - Arguments to update one PayoutRule.
     * @example
     * // Update one PayoutRule
     * const payoutRule = await prisma.payoutRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayoutRuleUpdateArgs>(args: SelectSubset<T, PayoutRuleUpdateArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayoutRules.
     * @param {PayoutRuleDeleteManyArgs} args - Arguments to filter PayoutRules to delete.
     * @example
     * // Delete a few PayoutRules
     * const { count } = await prisma.payoutRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayoutRuleDeleteManyArgs>(args?: SelectSubset<T, PayoutRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayoutRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayoutRules
     * const payoutRule = await prisma.payoutRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayoutRuleUpdateManyArgs>(args: SelectSubset<T, PayoutRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayoutRules and returns the data updated in the database.
     * @param {PayoutRuleUpdateManyAndReturnArgs} args - Arguments to update many PayoutRules.
     * @example
     * // Update many PayoutRules
     * const payoutRule = await prisma.payoutRule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayoutRules and only return the `id`
     * const payoutRuleWithIdOnly = await prisma.payoutRule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayoutRuleUpdateManyAndReturnArgs>(args: SelectSubset<T, PayoutRuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayoutRule.
     * @param {PayoutRuleUpsertArgs} args - Arguments to update or create a PayoutRule.
     * @example
     * // Update or create a PayoutRule
     * const payoutRule = await prisma.payoutRule.upsert({
     *   create: {
     *     // ... data to create a PayoutRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayoutRule we want to update
     *   }
     * })
     */
    upsert<T extends PayoutRuleUpsertArgs>(args: SelectSubset<T, PayoutRuleUpsertArgs<ExtArgs>>): Prisma__PayoutRuleClient<$Result.GetResult<Prisma.$PayoutRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayoutRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleCountArgs} args - Arguments to filter PayoutRules to count.
     * @example
     * // Count the number of PayoutRules
     * const count = await prisma.payoutRule.count({
     *   where: {
     *     // ... the filter for the PayoutRules we want to count
     *   }
     * })
    **/
    count<T extends PayoutRuleCountArgs>(
      args?: Subset<T, PayoutRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayoutRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayoutRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayoutRuleAggregateArgs>(args: Subset<T, PayoutRuleAggregateArgs>): Prisma.PrismaPromise<GetPayoutRuleAggregateType<T>>

    /**
     * Group by PayoutRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayoutRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayoutRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayoutRuleGroupByArgs['orderBy'] }
        : { orderBy?: PayoutRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayoutRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayoutRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayoutRule model
   */
  readonly fields: PayoutRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayoutRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayoutRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bet_type<T extends BetTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BetTypeDefaultArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prize_tier<T extends PrizeTierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrizeTierDefaultArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayoutRule model
   */
  interface PayoutRuleFieldRefs {
    readonly id: FieldRef<"PayoutRule", 'Int'>
    readonly payout_rate: FieldRef<"PayoutRule", 'Decimal'>
    readonly bet_type_id: FieldRef<"PayoutRule", 'Int'>
    readonly prize_tier_id: FieldRef<"PayoutRule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PayoutRule findUnique
   */
  export type PayoutRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter, which PayoutRule to fetch.
     */
    where: PayoutRuleWhereUniqueInput
  }

  /**
   * PayoutRule findUniqueOrThrow
   */
  export type PayoutRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter, which PayoutRule to fetch.
     */
    where: PayoutRuleWhereUniqueInput
  }

  /**
   * PayoutRule findFirst
   */
  export type PayoutRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter, which PayoutRule to fetch.
     */
    where?: PayoutRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayoutRules to fetch.
     */
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayoutRules.
     */
    cursor?: PayoutRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayoutRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayoutRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayoutRules.
     */
    distinct?: PayoutRuleScalarFieldEnum | PayoutRuleScalarFieldEnum[]
  }

  /**
   * PayoutRule findFirstOrThrow
   */
  export type PayoutRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter, which PayoutRule to fetch.
     */
    where?: PayoutRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayoutRules to fetch.
     */
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayoutRules.
     */
    cursor?: PayoutRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayoutRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayoutRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayoutRules.
     */
    distinct?: PayoutRuleScalarFieldEnum | PayoutRuleScalarFieldEnum[]
  }

  /**
   * PayoutRule findMany
   */
  export type PayoutRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter, which PayoutRules to fetch.
     */
    where?: PayoutRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayoutRules to fetch.
     */
    orderBy?: PayoutRuleOrderByWithRelationInput | PayoutRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayoutRules.
     */
    cursor?: PayoutRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayoutRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayoutRules.
     */
    skip?: number
    distinct?: PayoutRuleScalarFieldEnum | PayoutRuleScalarFieldEnum[]
  }

  /**
   * PayoutRule create
   */
  export type PayoutRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a PayoutRule.
     */
    data: XOR<PayoutRuleCreateInput, PayoutRuleUncheckedCreateInput>
  }

  /**
   * PayoutRule createMany
   */
  export type PayoutRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayoutRules.
     */
    data: PayoutRuleCreateManyInput | PayoutRuleCreateManyInput[]
  }

  /**
   * PayoutRule createManyAndReturn
   */
  export type PayoutRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * The data used to create many PayoutRules.
     */
    data: PayoutRuleCreateManyInput | PayoutRuleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayoutRule update
   */
  export type PayoutRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a PayoutRule.
     */
    data: XOR<PayoutRuleUpdateInput, PayoutRuleUncheckedUpdateInput>
    /**
     * Choose, which PayoutRule to update.
     */
    where: PayoutRuleWhereUniqueInput
  }

  /**
   * PayoutRule updateMany
   */
  export type PayoutRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayoutRules.
     */
    data: XOR<PayoutRuleUpdateManyMutationInput, PayoutRuleUncheckedUpdateManyInput>
    /**
     * Filter which PayoutRules to update
     */
    where?: PayoutRuleWhereInput
    /**
     * Limit how many PayoutRules to update.
     */
    limit?: number
  }

  /**
   * PayoutRule updateManyAndReturn
   */
  export type PayoutRuleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * The data used to update PayoutRules.
     */
    data: XOR<PayoutRuleUpdateManyMutationInput, PayoutRuleUncheckedUpdateManyInput>
    /**
     * Filter which PayoutRules to update
     */
    where?: PayoutRuleWhereInput
    /**
     * Limit how many PayoutRules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayoutRule upsert
   */
  export type PayoutRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the PayoutRule to update in case it exists.
     */
    where: PayoutRuleWhereUniqueInput
    /**
     * In case the PayoutRule found by the `where` argument doesn't exist, create a new PayoutRule with this data.
     */
    create: XOR<PayoutRuleCreateInput, PayoutRuleUncheckedCreateInput>
    /**
     * In case the PayoutRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayoutRuleUpdateInput, PayoutRuleUncheckedUpdateInput>
  }

  /**
   * PayoutRule delete
   */
  export type PayoutRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
    /**
     * Filter which PayoutRule to delete.
     */
    where: PayoutRuleWhereUniqueInput
  }

  /**
   * PayoutRule deleteMany
   */
  export type PayoutRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayoutRules to delete
     */
    where?: PayoutRuleWhereInput
    /**
     * Limit how many PayoutRules to delete.
     */
    limit?: number
  }

  /**
   * PayoutRule without action
   */
  export type PayoutRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayoutRule
     */
    select?: PayoutRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayoutRule
     */
    omit?: PayoutRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayoutRuleInclude<ExtArgs> | null
  }


  /**
   * Model DrawResult
   */

  export type AggregateDrawResult = {
    _count: DrawResultCountAggregateOutputType | null
    _avg: DrawResultAvgAggregateOutputType | null
    _sum: DrawResultSumAggregateOutputType | null
    _min: DrawResultMinAggregateOutputType | null
    _max: DrawResultMaxAggregateOutputType | null
  }

  export type DrawResultAvgAggregateOutputType = {
    id: number | null
    draw_schedule_id: number | null
  }

  export type DrawResultSumAggregateOutputType = {
    id: number | null
    draw_schedule_id: number | null
  }

  export type DrawResultMinAggregateOutputType = {
    id: number | null
    draw_date: Date | null
    prize1_number: string | null
    prize2_number: string | null
    prize3_number: string | null
    prize4_number: string | null
    prize5_number: string | null
    prize6_number: string | null
    prize7_number: string | null
    status: $Enums.DrawStatus | null
    draw_schedule_id: number | null
  }

  export type DrawResultMaxAggregateOutputType = {
    id: number | null
    draw_date: Date | null
    prize1_number: string | null
    prize2_number: string | null
    prize3_number: string | null
    prize4_number: string | null
    prize5_number: string | null
    prize6_number: string | null
    prize7_number: string | null
    status: $Enums.DrawStatus | null
    draw_schedule_id: number | null
  }

  export type DrawResultCountAggregateOutputType = {
    id: number
    draw_date: number
    prize1_number: number
    prize2_number: number
    prize3_number: number
    prize4_number: number
    prize5_number: number
    prize6_number: number
    prize7_number: number
    status: number
    draw_schedule_id: number
    _all: number
  }


  export type DrawResultAvgAggregateInputType = {
    id?: true
    draw_schedule_id?: true
  }

  export type DrawResultSumAggregateInputType = {
    id?: true
    draw_schedule_id?: true
  }

  export type DrawResultMinAggregateInputType = {
    id?: true
    draw_date?: true
    prize1_number?: true
    prize2_number?: true
    prize3_number?: true
    prize4_number?: true
    prize5_number?: true
    prize6_number?: true
    prize7_number?: true
    status?: true
    draw_schedule_id?: true
  }

  export type DrawResultMaxAggregateInputType = {
    id?: true
    draw_date?: true
    prize1_number?: true
    prize2_number?: true
    prize3_number?: true
    prize4_number?: true
    prize5_number?: true
    prize6_number?: true
    prize7_number?: true
    status?: true
    draw_schedule_id?: true
  }

  export type DrawResultCountAggregateInputType = {
    id?: true
    draw_date?: true
    prize1_number?: true
    prize2_number?: true
    prize3_number?: true
    prize4_number?: true
    prize5_number?: true
    prize6_number?: true
    prize7_number?: true
    status?: true
    draw_schedule_id?: true
    _all?: true
  }

  export type DrawResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DrawResult to aggregate.
     */
    where?: DrawResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawResults to fetch.
     */
    orderBy?: DrawResultOrderByWithRelationInput | DrawResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DrawResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DrawResults
    **/
    _count?: true | DrawResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DrawResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DrawResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DrawResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DrawResultMaxAggregateInputType
  }

  export type GetDrawResultAggregateType<T extends DrawResultAggregateArgs> = {
        [P in keyof T & keyof AggregateDrawResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrawResult[P]>
      : GetScalarType<T[P], AggregateDrawResult[P]>
  }




  export type DrawResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DrawResultWhereInput
    orderBy?: DrawResultOrderByWithAggregationInput | DrawResultOrderByWithAggregationInput[]
    by: DrawResultScalarFieldEnum[] | DrawResultScalarFieldEnum
    having?: DrawResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DrawResultCountAggregateInputType | true
    _avg?: DrawResultAvgAggregateInputType
    _sum?: DrawResultSumAggregateInputType
    _min?: DrawResultMinAggregateInputType
    _max?: DrawResultMaxAggregateInputType
  }

  export type DrawResultGroupByOutputType = {
    id: number
    draw_date: Date
    prize1_number: string | null
    prize2_number: string | null
    prize3_number: string | null
    prize4_number: string | null
    prize5_number: string | null
    prize6_number: string | null
    prize7_number: string | null
    status: $Enums.DrawStatus
    draw_schedule_id: number
    _count: DrawResultCountAggregateOutputType | null
    _avg: DrawResultAvgAggregateOutputType | null
    _sum: DrawResultSumAggregateOutputType | null
    _min: DrawResultMinAggregateOutputType | null
    _max: DrawResultMaxAggregateOutputType | null
  }

  type GetDrawResultGroupByPayload<T extends DrawResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DrawResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DrawResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DrawResultGroupByOutputType[P]>
            : GetScalarType<T[P], DrawResultGroupByOutputType[P]>
        }
      >
    >


  export type DrawResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    draw_date?: boolean
    prize1_number?: boolean
    prize2_number?: boolean
    prize3_number?: boolean
    prize4_number?: boolean
    prize5_number?: boolean
    prize6_number?: boolean
    prize7_number?: boolean
    status?: boolean
    draw_schedule_id?: boolean
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
    bets?: boolean | DrawResult$betsArgs<ExtArgs>
    _count?: boolean | DrawResultCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawResult"]>

  export type DrawResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    draw_date?: boolean
    prize1_number?: boolean
    prize2_number?: boolean
    prize3_number?: boolean
    prize4_number?: boolean
    prize5_number?: boolean
    prize6_number?: boolean
    prize7_number?: boolean
    status?: boolean
    draw_schedule_id?: boolean
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawResult"]>

  export type DrawResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    draw_date?: boolean
    prize1_number?: boolean
    prize2_number?: boolean
    prize3_number?: boolean
    prize4_number?: boolean
    prize5_number?: boolean
    prize6_number?: boolean
    prize7_number?: boolean
    status?: boolean
    draw_schedule_id?: boolean
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drawResult"]>

  export type DrawResultSelectScalar = {
    id?: boolean
    draw_date?: boolean
    prize1_number?: boolean
    prize2_number?: boolean
    prize3_number?: boolean
    prize4_number?: boolean
    prize5_number?: boolean
    prize6_number?: boolean
    prize7_number?: boolean
    status?: boolean
    draw_schedule_id?: boolean
  }

  export type DrawResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "draw_date" | "prize1_number" | "prize2_number" | "prize3_number" | "prize4_number" | "prize5_number" | "prize6_number" | "prize7_number" | "status" | "draw_schedule_id", ExtArgs["result"]["drawResult"]>
  export type DrawResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
    bets?: boolean | DrawResult$betsArgs<ExtArgs>
    _count?: boolean | DrawResultCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DrawResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
  }
  export type DrawResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draw_schedule?: boolean | DrawScheduleDefaultArgs<ExtArgs>
  }

  export type $DrawResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DrawResult"
    objects: {
      draw_schedule: Prisma.$DrawSchedulePayload<ExtArgs>
      bets: Prisma.$BetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      draw_date: Date
      prize1_number: string | null
      prize2_number: string | null
      prize3_number: string | null
      prize4_number: string | null
      prize5_number: string | null
      prize6_number: string | null
      prize7_number: string | null
      status: $Enums.DrawStatus
      draw_schedule_id: number
    }, ExtArgs["result"]["drawResult"]>
    composites: {}
  }

  type DrawResultGetPayload<S extends boolean | null | undefined | DrawResultDefaultArgs> = $Result.GetResult<Prisma.$DrawResultPayload, S>

  type DrawResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DrawResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DrawResultCountAggregateInputType | true
    }

  export interface DrawResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DrawResult'], meta: { name: 'DrawResult' } }
    /**
     * Find zero or one DrawResult that matches the filter.
     * @param {DrawResultFindUniqueArgs} args - Arguments to find a DrawResult
     * @example
     * // Get one DrawResult
     * const drawResult = await prisma.drawResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DrawResultFindUniqueArgs>(args: SelectSubset<T, DrawResultFindUniqueArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DrawResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DrawResultFindUniqueOrThrowArgs} args - Arguments to find a DrawResult
     * @example
     * // Get one DrawResult
     * const drawResult = await prisma.drawResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DrawResultFindUniqueOrThrowArgs>(args: SelectSubset<T, DrawResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DrawResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultFindFirstArgs} args - Arguments to find a DrawResult
     * @example
     * // Get one DrawResult
     * const drawResult = await prisma.drawResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DrawResultFindFirstArgs>(args?: SelectSubset<T, DrawResultFindFirstArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DrawResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultFindFirstOrThrowArgs} args - Arguments to find a DrawResult
     * @example
     * // Get one DrawResult
     * const drawResult = await prisma.drawResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DrawResultFindFirstOrThrowArgs>(args?: SelectSubset<T, DrawResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DrawResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DrawResults
     * const drawResults = await prisma.drawResult.findMany()
     * 
     * // Get first 10 DrawResults
     * const drawResults = await prisma.drawResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const drawResultWithIdOnly = await prisma.drawResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DrawResultFindManyArgs>(args?: SelectSubset<T, DrawResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DrawResult.
     * @param {DrawResultCreateArgs} args - Arguments to create a DrawResult.
     * @example
     * // Create one DrawResult
     * const DrawResult = await prisma.drawResult.create({
     *   data: {
     *     // ... data to create a DrawResult
     *   }
     * })
     * 
     */
    create<T extends DrawResultCreateArgs>(args: SelectSubset<T, DrawResultCreateArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DrawResults.
     * @param {DrawResultCreateManyArgs} args - Arguments to create many DrawResults.
     * @example
     * // Create many DrawResults
     * const drawResult = await prisma.drawResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DrawResultCreateManyArgs>(args?: SelectSubset<T, DrawResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DrawResults and returns the data saved in the database.
     * @param {DrawResultCreateManyAndReturnArgs} args - Arguments to create many DrawResults.
     * @example
     * // Create many DrawResults
     * const drawResult = await prisma.drawResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DrawResults and only return the `id`
     * const drawResultWithIdOnly = await prisma.drawResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DrawResultCreateManyAndReturnArgs>(args?: SelectSubset<T, DrawResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DrawResult.
     * @param {DrawResultDeleteArgs} args - Arguments to delete one DrawResult.
     * @example
     * // Delete one DrawResult
     * const DrawResult = await prisma.drawResult.delete({
     *   where: {
     *     // ... filter to delete one DrawResult
     *   }
     * })
     * 
     */
    delete<T extends DrawResultDeleteArgs>(args: SelectSubset<T, DrawResultDeleteArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DrawResult.
     * @param {DrawResultUpdateArgs} args - Arguments to update one DrawResult.
     * @example
     * // Update one DrawResult
     * const drawResult = await prisma.drawResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DrawResultUpdateArgs>(args: SelectSubset<T, DrawResultUpdateArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DrawResults.
     * @param {DrawResultDeleteManyArgs} args - Arguments to filter DrawResults to delete.
     * @example
     * // Delete a few DrawResults
     * const { count } = await prisma.drawResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DrawResultDeleteManyArgs>(args?: SelectSubset<T, DrawResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DrawResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DrawResults
     * const drawResult = await prisma.drawResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DrawResultUpdateManyArgs>(args: SelectSubset<T, DrawResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DrawResults and returns the data updated in the database.
     * @param {DrawResultUpdateManyAndReturnArgs} args - Arguments to update many DrawResults.
     * @example
     * // Update many DrawResults
     * const drawResult = await prisma.drawResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DrawResults and only return the `id`
     * const drawResultWithIdOnly = await prisma.drawResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DrawResultUpdateManyAndReturnArgs>(args: SelectSubset<T, DrawResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DrawResult.
     * @param {DrawResultUpsertArgs} args - Arguments to update or create a DrawResult.
     * @example
     * // Update or create a DrawResult
     * const drawResult = await prisma.drawResult.upsert({
     *   create: {
     *     // ... data to create a DrawResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DrawResult we want to update
     *   }
     * })
     */
    upsert<T extends DrawResultUpsertArgs>(args: SelectSubset<T, DrawResultUpsertArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DrawResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultCountArgs} args - Arguments to filter DrawResults to count.
     * @example
     * // Count the number of DrawResults
     * const count = await prisma.drawResult.count({
     *   where: {
     *     // ... the filter for the DrawResults we want to count
     *   }
     * })
    **/
    count<T extends DrawResultCountArgs>(
      args?: Subset<T, DrawResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DrawResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DrawResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DrawResultAggregateArgs>(args: Subset<T, DrawResultAggregateArgs>): Prisma.PrismaPromise<GetDrawResultAggregateType<T>>

    /**
     * Group by DrawResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DrawResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DrawResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DrawResultGroupByArgs['orderBy'] }
        : { orderBy?: DrawResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DrawResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrawResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DrawResult model
   */
  readonly fields: DrawResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DrawResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DrawResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    draw_schedule<T extends DrawScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DrawScheduleDefaultArgs<ExtArgs>>): Prisma__DrawScheduleClient<$Result.GetResult<Prisma.$DrawSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bets<T extends DrawResult$betsArgs<ExtArgs> = {}>(args?: Subset<T, DrawResult$betsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DrawResult model
   */
  interface DrawResultFieldRefs {
    readonly id: FieldRef<"DrawResult", 'Int'>
    readonly draw_date: FieldRef<"DrawResult", 'DateTime'>
    readonly prize1_number: FieldRef<"DrawResult", 'String'>
    readonly prize2_number: FieldRef<"DrawResult", 'String'>
    readonly prize3_number: FieldRef<"DrawResult", 'String'>
    readonly prize4_number: FieldRef<"DrawResult", 'String'>
    readonly prize5_number: FieldRef<"DrawResult", 'String'>
    readonly prize6_number: FieldRef<"DrawResult", 'String'>
    readonly prize7_number: FieldRef<"DrawResult", 'String'>
    readonly status: FieldRef<"DrawResult", 'DrawStatus'>
    readonly draw_schedule_id: FieldRef<"DrawResult", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DrawResult findUnique
   */
  export type DrawResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter, which DrawResult to fetch.
     */
    where: DrawResultWhereUniqueInput
  }

  /**
   * DrawResult findUniqueOrThrow
   */
  export type DrawResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter, which DrawResult to fetch.
     */
    where: DrawResultWhereUniqueInput
  }

  /**
   * DrawResult findFirst
   */
  export type DrawResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter, which DrawResult to fetch.
     */
    where?: DrawResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawResults to fetch.
     */
    orderBy?: DrawResultOrderByWithRelationInput | DrawResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DrawResults.
     */
    cursor?: DrawResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DrawResults.
     */
    distinct?: DrawResultScalarFieldEnum | DrawResultScalarFieldEnum[]
  }

  /**
   * DrawResult findFirstOrThrow
   */
  export type DrawResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter, which DrawResult to fetch.
     */
    where?: DrawResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawResults to fetch.
     */
    orderBy?: DrawResultOrderByWithRelationInput | DrawResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DrawResults.
     */
    cursor?: DrawResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DrawResults.
     */
    distinct?: DrawResultScalarFieldEnum | DrawResultScalarFieldEnum[]
  }

  /**
   * DrawResult findMany
   */
  export type DrawResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter, which DrawResults to fetch.
     */
    where?: DrawResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DrawResults to fetch.
     */
    orderBy?: DrawResultOrderByWithRelationInput | DrawResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DrawResults.
     */
    cursor?: DrawResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DrawResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DrawResults.
     */
    skip?: number
    distinct?: DrawResultScalarFieldEnum | DrawResultScalarFieldEnum[]
  }

  /**
   * DrawResult create
   */
  export type DrawResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * The data needed to create a DrawResult.
     */
    data: XOR<DrawResultCreateInput, DrawResultUncheckedCreateInput>
  }

  /**
   * DrawResult createMany
   */
  export type DrawResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DrawResults.
     */
    data: DrawResultCreateManyInput | DrawResultCreateManyInput[]
  }

  /**
   * DrawResult createManyAndReturn
   */
  export type DrawResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * The data used to create many DrawResults.
     */
    data: DrawResultCreateManyInput | DrawResultCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DrawResult update
   */
  export type DrawResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * The data needed to update a DrawResult.
     */
    data: XOR<DrawResultUpdateInput, DrawResultUncheckedUpdateInput>
    /**
     * Choose, which DrawResult to update.
     */
    where: DrawResultWhereUniqueInput
  }

  /**
   * DrawResult updateMany
   */
  export type DrawResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DrawResults.
     */
    data: XOR<DrawResultUpdateManyMutationInput, DrawResultUncheckedUpdateManyInput>
    /**
     * Filter which DrawResults to update
     */
    where?: DrawResultWhereInput
    /**
     * Limit how many DrawResults to update.
     */
    limit?: number
  }

  /**
   * DrawResult updateManyAndReturn
   */
  export type DrawResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * The data used to update DrawResults.
     */
    data: XOR<DrawResultUpdateManyMutationInput, DrawResultUncheckedUpdateManyInput>
    /**
     * Filter which DrawResults to update
     */
    where?: DrawResultWhereInput
    /**
     * Limit how many DrawResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DrawResult upsert
   */
  export type DrawResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * The filter to search for the DrawResult to update in case it exists.
     */
    where: DrawResultWhereUniqueInput
    /**
     * In case the DrawResult found by the `where` argument doesn't exist, create a new DrawResult with this data.
     */
    create: XOR<DrawResultCreateInput, DrawResultUncheckedCreateInput>
    /**
     * In case the DrawResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DrawResultUpdateInput, DrawResultUncheckedUpdateInput>
  }

  /**
   * DrawResult delete
   */
  export type DrawResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
    /**
     * Filter which DrawResult to delete.
     */
    where: DrawResultWhereUniqueInput
  }

  /**
   * DrawResult deleteMany
   */
  export type DrawResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DrawResults to delete
     */
    where?: DrawResultWhereInput
    /**
     * Limit how many DrawResults to delete.
     */
    limit?: number
  }

  /**
   * DrawResult.bets
   */
  export type DrawResult$betsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    where?: BetWhereInput
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    cursor?: BetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * DrawResult without action
   */
  export type DrawResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DrawResult
     */
    select?: DrawResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DrawResult
     */
    omit?: DrawResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DrawResultInclude<ExtArgs> | null
  }


  /**
   * Model Bet
   */

  export type AggregateBet = {
    _count: BetCountAggregateOutputType | null
    _avg: BetAvgAggregateOutputType | null
    _sum: BetSumAggregateOutputType | null
    _min: BetMinAggregateOutputType | null
    _max: BetMaxAggregateOutputType | null
  }

  export type BetAvgAggregateOutputType = {
    id: number | null
    amount_wagered: Decimal | null
    amount_won: Decimal | null
    user_id: number | null
    game_type_id: number | null
    bet_type_id: number | null
    prize_tier_id: number | null
    draw_result_id: number | null
  }

  export type BetSumAggregateOutputType = {
    id: number | null
    amount_wagered: Decimal | null
    amount_won: Decimal | null
    user_id: number | null
    game_type_id: number | null
    bet_type_id: number | null
    prize_tier_id: number | null
    draw_result_id: number | null
  }

  export type BetMinAggregateOutputType = {
    id: number | null
    numbers_betted: string | null
    amount_wagered: Decimal | null
    amount_won: Decimal | null
    status: $Enums.BetStatus | null
    created_at: Date | null
    user_id: number | null
    game_type_id: number | null
    bet_type_id: number | null
    prize_tier_id: number | null
    draw_result_id: number | null
  }

  export type BetMaxAggregateOutputType = {
    id: number | null
    numbers_betted: string | null
    amount_wagered: Decimal | null
    amount_won: Decimal | null
    status: $Enums.BetStatus | null
    created_at: Date | null
    user_id: number | null
    game_type_id: number | null
    bet_type_id: number | null
    prize_tier_id: number | null
    draw_result_id: number | null
  }

  export type BetCountAggregateOutputType = {
    id: number
    numbers_betted: number
    amount_wagered: number
    amount_won: number
    status: number
    created_at: number
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
    _all: number
  }


  export type BetAvgAggregateInputType = {
    id?: true
    amount_wagered?: true
    amount_won?: true
    user_id?: true
    game_type_id?: true
    bet_type_id?: true
    prize_tier_id?: true
    draw_result_id?: true
  }

  export type BetSumAggregateInputType = {
    id?: true
    amount_wagered?: true
    amount_won?: true
    user_id?: true
    game_type_id?: true
    bet_type_id?: true
    prize_tier_id?: true
    draw_result_id?: true
  }

  export type BetMinAggregateInputType = {
    id?: true
    numbers_betted?: true
    amount_wagered?: true
    amount_won?: true
    status?: true
    created_at?: true
    user_id?: true
    game_type_id?: true
    bet_type_id?: true
    prize_tier_id?: true
    draw_result_id?: true
  }

  export type BetMaxAggregateInputType = {
    id?: true
    numbers_betted?: true
    amount_wagered?: true
    amount_won?: true
    status?: true
    created_at?: true
    user_id?: true
    game_type_id?: true
    bet_type_id?: true
    prize_tier_id?: true
    draw_result_id?: true
  }

  export type BetCountAggregateInputType = {
    id?: true
    numbers_betted?: true
    amount_wagered?: true
    amount_won?: true
    status?: true
    created_at?: true
    user_id?: true
    game_type_id?: true
    bet_type_id?: true
    prize_tier_id?: true
    draw_result_id?: true
    _all?: true
  }

  export type BetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bet to aggregate.
     */
    where?: BetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bets to fetch.
     */
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bets
    **/
    _count?: true | BetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BetMaxAggregateInputType
  }

  export type GetBetAggregateType<T extends BetAggregateArgs> = {
        [P in keyof T & keyof AggregateBet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBet[P]>
      : GetScalarType<T[P], AggregateBet[P]>
  }




  export type BetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BetWhereInput
    orderBy?: BetOrderByWithAggregationInput | BetOrderByWithAggregationInput[]
    by: BetScalarFieldEnum[] | BetScalarFieldEnum
    having?: BetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BetCountAggregateInputType | true
    _avg?: BetAvgAggregateInputType
    _sum?: BetSumAggregateInputType
    _min?: BetMinAggregateInputType
    _max?: BetMaxAggregateInputType
  }

  export type BetGroupByOutputType = {
    id: number
    numbers_betted: string
    amount_wagered: Decimal
    amount_won: Decimal
    status: $Enums.BetStatus
    created_at: Date
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
    _count: BetCountAggregateOutputType | null
    _avg: BetAvgAggregateOutputType | null
    _sum: BetSumAggregateOutputType | null
    _min: BetMinAggregateOutputType | null
    _max: BetMaxAggregateOutputType | null
  }

  type GetBetGroupByPayload<T extends BetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BetGroupByOutputType[P]>
            : GetScalarType<T[P], BetGroupByOutputType[P]>
        }
      >
    >


  export type BetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numbers_betted?: boolean
    amount_wagered?: boolean
    amount_won?: boolean
    status?: boolean
    created_at?: boolean
    user_id?: boolean
    game_type_id?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    draw_result_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bet"]>

  export type BetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numbers_betted?: boolean
    amount_wagered?: boolean
    amount_won?: boolean
    status?: boolean
    created_at?: boolean
    user_id?: boolean
    game_type_id?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    draw_result_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bet"]>

  export type BetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numbers_betted?: boolean
    amount_wagered?: boolean
    amount_won?: boolean
    status?: boolean
    created_at?: boolean
    user_id?: boolean
    game_type_id?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    draw_result_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bet"]>

  export type BetSelectScalar = {
    id?: boolean
    numbers_betted?: boolean
    amount_wagered?: boolean
    amount_won?: boolean
    status?: boolean
    created_at?: boolean
    user_id?: boolean
    game_type_id?: boolean
    bet_type_id?: boolean
    prize_tier_id?: boolean
    draw_result_id?: boolean
  }

  export type BetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numbers_betted" | "amount_wagered" | "amount_won" | "status" | "created_at" | "user_id" | "game_type_id" | "bet_type_id" | "prize_tier_id" | "draw_result_id", ExtArgs["result"]["bet"]>
  export type BetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }
  export type BetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }
  export type BetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game_type?: boolean | GameTypeDefaultArgs<ExtArgs>
    bet_type?: boolean | BetTypeDefaultArgs<ExtArgs>
    prize_tier?: boolean | PrizeTierDefaultArgs<ExtArgs>
    draw_result?: boolean | DrawResultDefaultArgs<ExtArgs>
  }

  export type $BetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game_type: Prisma.$GameTypePayload<ExtArgs>
      bet_type: Prisma.$BetTypePayload<ExtArgs>
      prize_tier: Prisma.$PrizeTierPayload<ExtArgs>
      draw_result: Prisma.$DrawResultPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numbers_betted: string
      amount_wagered: Prisma.Decimal
      amount_won: Prisma.Decimal
      status: $Enums.BetStatus
      created_at: Date
      user_id: number
      game_type_id: number
      bet_type_id: number
      prize_tier_id: number
      draw_result_id: number
    }, ExtArgs["result"]["bet"]>
    composites: {}
  }

  type BetGetPayload<S extends boolean | null | undefined | BetDefaultArgs> = $Result.GetResult<Prisma.$BetPayload, S>

  type BetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BetCountAggregateInputType | true
    }

  export interface BetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bet'], meta: { name: 'Bet' } }
    /**
     * Find zero or one Bet that matches the filter.
     * @param {BetFindUniqueArgs} args - Arguments to find a Bet
     * @example
     * // Get one Bet
     * const bet = await prisma.bet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BetFindUniqueArgs>(args: SelectSubset<T, BetFindUniqueArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BetFindUniqueOrThrowArgs} args - Arguments to find a Bet
     * @example
     * // Get one Bet
     * const bet = await prisma.bet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BetFindUniqueOrThrowArgs>(args: SelectSubset<T, BetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetFindFirstArgs} args - Arguments to find a Bet
     * @example
     * // Get one Bet
     * const bet = await prisma.bet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BetFindFirstArgs>(args?: SelectSubset<T, BetFindFirstArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetFindFirstOrThrowArgs} args - Arguments to find a Bet
     * @example
     * // Get one Bet
     * const bet = await prisma.bet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BetFindFirstOrThrowArgs>(args?: SelectSubset<T, BetFindFirstOrThrowArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bets
     * const bets = await prisma.bet.findMany()
     * 
     * // Get first 10 Bets
     * const bets = await prisma.bet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const betWithIdOnly = await prisma.bet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BetFindManyArgs>(args?: SelectSubset<T, BetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bet.
     * @param {BetCreateArgs} args - Arguments to create a Bet.
     * @example
     * // Create one Bet
     * const Bet = await prisma.bet.create({
     *   data: {
     *     // ... data to create a Bet
     *   }
     * })
     * 
     */
    create<T extends BetCreateArgs>(args: SelectSubset<T, BetCreateArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bets.
     * @param {BetCreateManyArgs} args - Arguments to create many Bets.
     * @example
     * // Create many Bets
     * const bet = await prisma.bet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BetCreateManyArgs>(args?: SelectSubset<T, BetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bets and returns the data saved in the database.
     * @param {BetCreateManyAndReturnArgs} args - Arguments to create many Bets.
     * @example
     * // Create many Bets
     * const bet = await prisma.bet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bets and only return the `id`
     * const betWithIdOnly = await prisma.bet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BetCreateManyAndReturnArgs>(args?: SelectSubset<T, BetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bet.
     * @param {BetDeleteArgs} args - Arguments to delete one Bet.
     * @example
     * // Delete one Bet
     * const Bet = await prisma.bet.delete({
     *   where: {
     *     // ... filter to delete one Bet
     *   }
     * })
     * 
     */
    delete<T extends BetDeleteArgs>(args: SelectSubset<T, BetDeleteArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bet.
     * @param {BetUpdateArgs} args - Arguments to update one Bet.
     * @example
     * // Update one Bet
     * const bet = await prisma.bet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BetUpdateArgs>(args: SelectSubset<T, BetUpdateArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bets.
     * @param {BetDeleteManyArgs} args - Arguments to filter Bets to delete.
     * @example
     * // Delete a few Bets
     * const { count } = await prisma.bet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BetDeleteManyArgs>(args?: SelectSubset<T, BetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bets
     * const bet = await prisma.bet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BetUpdateManyArgs>(args: SelectSubset<T, BetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bets and returns the data updated in the database.
     * @param {BetUpdateManyAndReturnArgs} args - Arguments to update many Bets.
     * @example
     * // Update many Bets
     * const bet = await prisma.bet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bets and only return the `id`
     * const betWithIdOnly = await prisma.bet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BetUpdateManyAndReturnArgs>(args: SelectSubset<T, BetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bet.
     * @param {BetUpsertArgs} args - Arguments to update or create a Bet.
     * @example
     * // Update or create a Bet
     * const bet = await prisma.bet.upsert({
     *   create: {
     *     // ... data to create a Bet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bet we want to update
     *   }
     * })
     */
    upsert<T extends BetUpsertArgs>(args: SelectSubset<T, BetUpsertArgs<ExtArgs>>): Prisma__BetClient<$Result.GetResult<Prisma.$BetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetCountArgs} args - Arguments to filter Bets to count.
     * @example
     * // Count the number of Bets
     * const count = await prisma.bet.count({
     *   where: {
     *     // ... the filter for the Bets we want to count
     *   }
     * })
    **/
    count<T extends BetCountArgs>(
      args?: Subset<T, BetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BetAggregateArgs>(args: Subset<T, BetAggregateArgs>): Prisma.PrismaPromise<GetBetAggregateType<T>>

    /**
     * Group by Bet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BetGroupByArgs['orderBy'] }
        : { orderBy?: BetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bet model
   */
  readonly fields: BetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game_type<T extends GameTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameTypeDefaultArgs<ExtArgs>>): Prisma__GameTypeClient<$Result.GetResult<Prisma.$GameTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bet_type<T extends BetTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BetTypeDefaultArgs<ExtArgs>>): Prisma__BetTypeClient<$Result.GetResult<Prisma.$BetTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prize_tier<T extends PrizeTierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrizeTierDefaultArgs<ExtArgs>>): Prisma__PrizeTierClient<$Result.GetResult<Prisma.$PrizeTierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    draw_result<T extends DrawResultDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DrawResultDefaultArgs<ExtArgs>>): Prisma__DrawResultClient<$Result.GetResult<Prisma.$DrawResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bet model
   */
  interface BetFieldRefs {
    readonly id: FieldRef<"Bet", 'Int'>
    readonly numbers_betted: FieldRef<"Bet", 'String'>
    readonly amount_wagered: FieldRef<"Bet", 'Decimal'>
    readonly amount_won: FieldRef<"Bet", 'Decimal'>
    readonly status: FieldRef<"Bet", 'BetStatus'>
    readonly created_at: FieldRef<"Bet", 'DateTime'>
    readonly user_id: FieldRef<"Bet", 'Int'>
    readonly game_type_id: FieldRef<"Bet", 'Int'>
    readonly bet_type_id: FieldRef<"Bet", 'Int'>
    readonly prize_tier_id: FieldRef<"Bet", 'Int'>
    readonly draw_result_id: FieldRef<"Bet", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bet findUnique
   */
  export type BetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter, which Bet to fetch.
     */
    where: BetWhereUniqueInput
  }

  /**
   * Bet findUniqueOrThrow
   */
  export type BetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter, which Bet to fetch.
     */
    where: BetWhereUniqueInput
  }

  /**
   * Bet findFirst
   */
  export type BetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter, which Bet to fetch.
     */
    where?: BetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bets to fetch.
     */
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bets.
     */
    cursor?: BetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bets.
     */
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * Bet findFirstOrThrow
   */
  export type BetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter, which Bet to fetch.
     */
    where?: BetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bets to fetch.
     */
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bets.
     */
    cursor?: BetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bets.
     */
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * Bet findMany
   */
  export type BetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter, which Bets to fetch.
     */
    where?: BetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bets to fetch.
     */
    orderBy?: BetOrderByWithRelationInput | BetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bets.
     */
    cursor?: BetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bets.
     */
    skip?: number
    distinct?: BetScalarFieldEnum | BetScalarFieldEnum[]
  }

  /**
   * Bet create
   */
  export type BetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * The data needed to create a Bet.
     */
    data: XOR<BetCreateInput, BetUncheckedCreateInput>
  }

  /**
   * Bet createMany
   */
  export type BetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bets.
     */
    data: BetCreateManyInput | BetCreateManyInput[]
  }

  /**
   * Bet createManyAndReturn
   */
  export type BetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * The data used to create many Bets.
     */
    data: BetCreateManyInput | BetCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bet update
   */
  export type BetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * The data needed to update a Bet.
     */
    data: XOR<BetUpdateInput, BetUncheckedUpdateInput>
    /**
     * Choose, which Bet to update.
     */
    where: BetWhereUniqueInput
  }

  /**
   * Bet updateMany
   */
  export type BetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bets.
     */
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyInput>
    /**
     * Filter which Bets to update
     */
    where?: BetWhereInput
    /**
     * Limit how many Bets to update.
     */
    limit?: number
  }

  /**
   * Bet updateManyAndReturn
   */
  export type BetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * The data used to update Bets.
     */
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyInput>
    /**
     * Filter which Bets to update
     */
    where?: BetWhereInput
    /**
     * Limit how many Bets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bet upsert
   */
  export type BetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * The filter to search for the Bet to update in case it exists.
     */
    where: BetWhereUniqueInput
    /**
     * In case the Bet found by the `where` argument doesn't exist, create a new Bet with this data.
     */
    create: XOR<BetCreateInput, BetUncheckedCreateInput>
    /**
     * In case the Bet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BetUpdateInput, BetUncheckedUpdateInput>
  }

  /**
   * Bet delete
   */
  export type BetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
    /**
     * Filter which Bet to delete.
     */
    where: BetWhereUniqueInput
  }

  /**
   * Bet deleteMany
   */
  export type BetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bets to delete
     */
    where?: BetWhereInput
    /**
     * Limit how many Bets to delete.
     */
    limit?: number
  }

  /**
   * Bet without action
   */
  export type BetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bet
     */
    select?: BetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bet
     */
    omit?: BetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BetInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    virtual_credits: 'virtual_credits',
    is_admin: 'is_admin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type GameTypeScalarFieldEnum = (typeof GameTypeScalarFieldEnum)[keyof typeof GameTypeScalarFieldEnum]


  export const PrizeTierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    start_prize: 'start_prize',
    end_prize: 'end_prize',
    description: 'description'
  };

  export type PrizeTierScalarFieldEnum = (typeof PrizeTierScalarFieldEnum)[keyof typeof PrizeTierScalarFieldEnum]


  export const DrawScheduleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    draw_time: 'draw_time',
    bet_close_time: 'bet_close_time'
  };

  export type DrawScheduleScalarFieldEnum = (typeof DrawScheduleScalarFieldEnum)[keyof typeof DrawScheduleScalarFieldEnum]


  export const BetTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BetTypeScalarFieldEnum = (typeof BetTypeScalarFieldEnum)[keyof typeof BetTypeScalarFieldEnum]


  export const PayoutRuleScalarFieldEnum: {
    id: 'id',
    payout_rate: 'payout_rate',
    bet_type_id: 'bet_type_id',
    prize_tier_id: 'prize_tier_id'
  };

  export type PayoutRuleScalarFieldEnum = (typeof PayoutRuleScalarFieldEnum)[keyof typeof PayoutRuleScalarFieldEnum]


  export const DrawResultScalarFieldEnum: {
    id: 'id',
    draw_date: 'draw_date',
    prize1_number: 'prize1_number',
    prize2_number: 'prize2_number',
    prize3_number: 'prize3_number',
    prize4_number: 'prize4_number',
    prize5_number: 'prize5_number',
    prize6_number: 'prize6_number',
    prize7_number: 'prize7_number',
    status: 'status',
    draw_schedule_id: 'draw_schedule_id'
  };

  export type DrawResultScalarFieldEnum = (typeof DrawResultScalarFieldEnum)[keyof typeof DrawResultScalarFieldEnum]


  export const BetScalarFieldEnum: {
    id: 'id',
    numbers_betted: 'numbers_betted',
    amount_wagered: 'amount_wagered',
    amount_won: 'amount_won',
    status: 'status',
    created_at: 'created_at',
    user_id: 'user_id',
    game_type_id: 'game_type_id',
    bet_type_id: 'bet_type_id',
    prize_tier_id: 'prize_tier_id',
    draw_result_id: 'draw_result_id'
  };

  export type BetScalarFieldEnum = (typeof BetScalarFieldEnum)[keyof typeof BetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DrawStatus'
   */
  export type EnumDrawStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DrawStatus'>
    


  /**
   * Reference to a field of type 'BetStatus'
   */
  export type EnumBetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BetStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    virtual_credits?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFilter<"User"> | boolean
    bets?: BetListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    virtual_credits?: SortOrder
    is_admin?: SortOrder
    bets?: BetOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    virtual_credits?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFilter<"User"> | boolean
    bets?: BetListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    virtual_credits?: SortOrder
    is_admin?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    virtual_credits?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    is_admin?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type GameTypeWhereInput = {
    AND?: GameTypeWhereInput | GameTypeWhereInput[]
    OR?: GameTypeWhereInput[]
    NOT?: GameTypeWhereInput | GameTypeWhereInput[]
    id?: IntFilter<"GameType"> | number
    name?: StringFilter<"GameType"> | string
    description?: StringNullableFilter<"GameType"> | string | null
    bets?: BetListRelationFilter
  }

  export type GameTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    bets?: BetOrderByRelationAggregateInput
  }

  export type GameTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: GameTypeWhereInput | GameTypeWhereInput[]
    OR?: GameTypeWhereInput[]
    NOT?: GameTypeWhereInput | GameTypeWhereInput[]
    description?: StringNullableFilter<"GameType"> | string | null
    bets?: BetListRelationFilter
  }, "id" | "name">

  export type GameTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: GameTypeCountOrderByAggregateInput
    _avg?: GameTypeAvgOrderByAggregateInput
    _max?: GameTypeMaxOrderByAggregateInput
    _min?: GameTypeMinOrderByAggregateInput
    _sum?: GameTypeSumOrderByAggregateInput
  }

  export type GameTypeScalarWhereWithAggregatesInput = {
    AND?: GameTypeScalarWhereWithAggregatesInput | GameTypeScalarWhereWithAggregatesInput[]
    OR?: GameTypeScalarWhereWithAggregatesInput[]
    NOT?: GameTypeScalarWhereWithAggregatesInput | GameTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameType"> | number
    name?: StringWithAggregatesFilter<"GameType"> | string
    description?: StringNullableWithAggregatesFilter<"GameType"> | string | null
  }

  export type PrizeTierWhereInput = {
    AND?: PrizeTierWhereInput | PrizeTierWhereInput[]
    OR?: PrizeTierWhereInput[]
    NOT?: PrizeTierWhereInput | PrizeTierWhereInput[]
    id?: IntFilter<"PrizeTier"> | number
    name?: StringFilter<"PrizeTier"> | string
    start_prize?: IntFilter<"PrizeTier"> | number
    end_prize?: IntFilter<"PrizeTier"> | number
    description?: StringNullableFilter<"PrizeTier"> | string | null
    payout_rules?: PayoutRuleListRelationFilter
    bets?: BetListRelationFilter
  }

  export type PrizeTierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
    description?: SortOrderInput | SortOrder
    payout_rules?: PayoutRuleOrderByRelationAggregateInput
    bets?: BetOrderByRelationAggregateInput
  }

  export type PrizeTierWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: PrizeTierWhereInput | PrizeTierWhereInput[]
    OR?: PrizeTierWhereInput[]
    NOT?: PrizeTierWhereInput | PrizeTierWhereInput[]
    start_prize?: IntFilter<"PrizeTier"> | number
    end_prize?: IntFilter<"PrizeTier"> | number
    description?: StringNullableFilter<"PrizeTier"> | string | null
    payout_rules?: PayoutRuleListRelationFilter
    bets?: BetListRelationFilter
  }, "id" | "name">

  export type PrizeTierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PrizeTierCountOrderByAggregateInput
    _avg?: PrizeTierAvgOrderByAggregateInput
    _max?: PrizeTierMaxOrderByAggregateInput
    _min?: PrizeTierMinOrderByAggregateInput
    _sum?: PrizeTierSumOrderByAggregateInput
  }

  export type PrizeTierScalarWhereWithAggregatesInput = {
    AND?: PrizeTierScalarWhereWithAggregatesInput | PrizeTierScalarWhereWithAggregatesInput[]
    OR?: PrizeTierScalarWhereWithAggregatesInput[]
    NOT?: PrizeTierScalarWhereWithAggregatesInput | PrizeTierScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PrizeTier"> | number
    name?: StringWithAggregatesFilter<"PrizeTier"> | string
    start_prize?: IntWithAggregatesFilter<"PrizeTier"> | number
    end_prize?: IntWithAggregatesFilter<"PrizeTier"> | number
    description?: StringNullableWithAggregatesFilter<"PrizeTier"> | string | null
  }

  export type DrawScheduleWhereInput = {
    AND?: DrawScheduleWhereInput | DrawScheduleWhereInput[]
    OR?: DrawScheduleWhereInput[]
    NOT?: DrawScheduleWhereInput | DrawScheduleWhereInput[]
    id?: IntFilter<"DrawSchedule"> | number
    name?: StringFilter<"DrawSchedule"> | string
    draw_time?: StringFilter<"DrawSchedule"> | string
    bet_close_time?: StringFilter<"DrawSchedule"> | string
    draw_results?: DrawResultListRelationFilter
  }

  export type DrawScheduleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    draw_time?: SortOrder
    bet_close_time?: SortOrder
    draw_results?: DrawResultOrderByRelationAggregateInput
  }

  export type DrawScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: DrawScheduleWhereInput | DrawScheduleWhereInput[]
    OR?: DrawScheduleWhereInput[]
    NOT?: DrawScheduleWhereInput | DrawScheduleWhereInput[]
    draw_time?: StringFilter<"DrawSchedule"> | string
    bet_close_time?: StringFilter<"DrawSchedule"> | string
    draw_results?: DrawResultListRelationFilter
  }, "id" | "name">

  export type DrawScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    draw_time?: SortOrder
    bet_close_time?: SortOrder
    _count?: DrawScheduleCountOrderByAggregateInput
    _avg?: DrawScheduleAvgOrderByAggregateInput
    _max?: DrawScheduleMaxOrderByAggregateInput
    _min?: DrawScheduleMinOrderByAggregateInput
    _sum?: DrawScheduleSumOrderByAggregateInput
  }

  export type DrawScheduleScalarWhereWithAggregatesInput = {
    AND?: DrawScheduleScalarWhereWithAggregatesInput | DrawScheduleScalarWhereWithAggregatesInput[]
    OR?: DrawScheduleScalarWhereWithAggregatesInput[]
    NOT?: DrawScheduleScalarWhereWithAggregatesInput | DrawScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DrawSchedule"> | number
    name?: StringWithAggregatesFilter<"DrawSchedule"> | string
    draw_time?: StringWithAggregatesFilter<"DrawSchedule"> | string
    bet_close_time?: StringWithAggregatesFilter<"DrawSchedule"> | string
  }

  export type BetTypeWhereInput = {
    AND?: BetTypeWhereInput | BetTypeWhereInput[]
    OR?: BetTypeWhereInput[]
    NOT?: BetTypeWhereInput | BetTypeWhereInput[]
    id?: IntFilter<"BetType"> | number
    name?: StringFilter<"BetType"> | string
    payout_rules?: PayoutRuleListRelationFilter
    bets?: BetListRelationFilter
  }

  export type BetTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    payout_rules?: PayoutRuleOrderByRelationAggregateInput
    bets?: BetOrderByRelationAggregateInput
  }

  export type BetTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: BetTypeWhereInput | BetTypeWhereInput[]
    OR?: BetTypeWhereInput[]
    NOT?: BetTypeWhereInput | BetTypeWhereInput[]
    payout_rules?: PayoutRuleListRelationFilter
    bets?: BetListRelationFilter
  }, "id" | "name">

  export type BetTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BetTypeCountOrderByAggregateInput
    _avg?: BetTypeAvgOrderByAggregateInput
    _max?: BetTypeMaxOrderByAggregateInput
    _min?: BetTypeMinOrderByAggregateInput
    _sum?: BetTypeSumOrderByAggregateInput
  }

  export type BetTypeScalarWhereWithAggregatesInput = {
    AND?: BetTypeScalarWhereWithAggregatesInput | BetTypeScalarWhereWithAggregatesInput[]
    OR?: BetTypeScalarWhereWithAggregatesInput[]
    NOT?: BetTypeScalarWhereWithAggregatesInput | BetTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BetType"> | number
    name?: StringWithAggregatesFilter<"BetType"> | string
  }

  export type PayoutRuleWhereInput = {
    AND?: PayoutRuleWhereInput | PayoutRuleWhereInput[]
    OR?: PayoutRuleWhereInput[]
    NOT?: PayoutRuleWhereInput | PayoutRuleWhereInput[]
    id?: IntFilter<"PayoutRule"> | number
    payout_rate?: DecimalFilter<"PayoutRule"> | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFilter<"PayoutRule"> | number
    prize_tier_id?: IntFilter<"PayoutRule"> | number
    bet_type?: XOR<BetTypeScalarRelationFilter, BetTypeWhereInput>
    prize_tier?: XOR<PrizeTierScalarRelationFilter, PrizeTierWhereInput>
  }

  export type PayoutRuleOrderByWithRelationInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    bet_type?: BetTypeOrderByWithRelationInput
    prize_tier?: PrizeTierOrderByWithRelationInput
  }

  export type PayoutRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bet_type_id_prize_tier_id?: PayoutRuleBet_type_idPrize_tier_idCompoundUniqueInput
    AND?: PayoutRuleWhereInput | PayoutRuleWhereInput[]
    OR?: PayoutRuleWhereInput[]
    NOT?: PayoutRuleWhereInput | PayoutRuleWhereInput[]
    payout_rate?: DecimalFilter<"PayoutRule"> | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFilter<"PayoutRule"> | number
    prize_tier_id?: IntFilter<"PayoutRule"> | number
    bet_type?: XOR<BetTypeScalarRelationFilter, BetTypeWhereInput>
    prize_tier?: XOR<PrizeTierScalarRelationFilter, PrizeTierWhereInput>
  }, "id" | "bet_type_id_prize_tier_id">

  export type PayoutRuleOrderByWithAggregationInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    _count?: PayoutRuleCountOrderByAggregateInput
    _avg?: PayoutRuleAvgOrderByAggregateInput
    _max?: PayoutRuleMaxOrderByAggregateInput
    _min?: PayoutRuleMinOrderByAggregateInput
    _sum?: PayoutRuleSumOrderByAggregateInput
  }

  export type PayoutRuleScalarWhereWithAggregatesInput = {
    AND?: PayoutRuleScalarWhereWithAggregatesInput | PayoutRuleScalarWhereWithAggregatesInput[]
    OR?: PayoutRuleScalarWhereWithAggregatesInput[]
    NOT?: PayoutRuleScalarWhereWithAggregatesInput | PayoutRuleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PayoutRule"> | number
    payout_rate?: DecimalWithAggregatesFilter<"PayoutRule"> | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntWithAggregatesFilter<"PayoutRule"> | number
    prize_tier_id?: IntWithAggregatesFilter<"PayoutRule"> | number
  }

  export type DrawResultWhereInput = {
    AND?: DrawResultWhereInput | DrawResultWhereInput[]
    OR?: DrawResultWhereInput[]
    NOT?: DrawResultWhereInput | DrawResultWhereInput[]
    id?: IntFilter<"DrawResult"> | number
    draw_date?: DateTimeFilter<"DrawResult"> | Date | string
    prize1_number?: StringNullableFilter<"DrawResult"> | string | null
    prize2_number?: StringNullableFilter<"DrawResult"> | string | null
    prize3_number?: StringNullableFilter<"DrawResult"> | string | null
    prize4_number?: StringNullableFilter<"DrawResult"> | string | null
    prize5_number?: StringNullableFilter<"DrawResult"> | string | null
    prize6_number?: StringNullableFilter<"DrawResult"> | string | null
    prize7_number?: StringNullableFilter<"DrawResult"> | string | null
    status?: EnumDrawStatusFilter<"DrawResult"> | $Enums.DrawStatus
    draw_schedule_id?: IntFilter<"DrawResult"> | number
    draw_schedule?: XOR<DrawScheduleScalarRelationFilter, DrawScheduleWhereInput>
    bets?: BetListRelationFilter
  }

  export type DrawResultOrderByWithRelationInput = {
    id?: SortOrder
    draw_date?: SortOrder
    prize1_number?: SortOrderInput | SortOrder
    prize2_number?: SortOrderInput | SortOrder
    prize3_number?: SortOrderInput | SortOrder
    prize4_number?: SortOrderInput | SortOrder
    prize5_number?: SortOrderInput | SortOrder
    prize6_number?: SortOrderInput | SortOrder
    prize7_number?: SortOrderInput | SortOrder
    status?: SortOrder
    draw_schedule_id?: SortOrder
    draw_schedule?: DrawScheduleOrderByWithRelationInput
    bets?: BetOrderByRelationAggregateInput
  }

  export type DrawResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    draw_schedule_id_draw_date?: DrawResultDraw_schedule_idDraw_dateCompoundUniqueInput
    AND?: DrawResultWhereInput | DrawResultWhereInput[]
    OR?: DrawResultWhereInput[]
    NOT?: DrawResultWhereInput | DrawResultWhereInput[]
    draw_date?: DateTimeFilter<"DrawResult"> | Date | string
    prize1_number?: StringNullableFilter<"DrawResult"> | string | null
    prize2_number?: StringNullableFilter<"DrawResult"> | string | null
    prize3_number?: StringNullableFilter<"DrawResult"> | string | null
    prize4_number?: StringNullableFilter<"DrawResult"> | string | null
    prize5_number?: StringNullableFilter<"DrawResult"> | string | null
    prize6_number?: StringNullableFilter<"DrawResult"> | string | null
    prize7_number?: StringNullableFilter<"DrawResult"> | string | null
    status?: EnumDrawStatusFilter<"DrawResult"> | $Enums.DrawStatus
    draw_schedule_id?: IntFilter<"DrawResult"> | number
    draw_schedule?: XOR<DrawScheduleScalarRelationFilter, DrawScheduleWhereInput>
    bets?: BetListRelationFilter
  }, "id" | "draw_schedule_id_draw_date">

  export type DrawResultOrderByWithAggregationInput = {
    id?: SortOrder
    draw_date?: SortOrder
    prize1_number?: SortOrderInput | SortOrder
    prize2_number?: SortOrderInput | SortOrder
    prize3_number?: SortOrderInput | SortOrder
    prize4_number?: SortOrderInput | SortOrder
    prize5_number?: SortOrderInput | SortOrder
    prize6_number?: SortOrderInput | SortOrder
    prize7_number?: SortOrderInput | SortOrder
    status?: SortOrder
    draw_schedule_id?: SortOrder
    _count?: DrawResultCountOrderByAggregateInput
    _avg?: DrawResultAvgOrderByAggregateInput
    _max?: DrawResultMaxOrderByAggregateInput
    _min?: DrawResultMinOrderByAggregateInput
    _sum?: DrawResultSumOrderByAggregateInput
  }

  export type DrawResultScalarWhereWithAggregatesInput = {
    AND?: DrawResultScalarWhereWithAggregatesInput | DrawResultScalarWhereWithAggregatesInput[]
    OR?: DrawResultScalarWhereWithAggregatesInput[]
    NOT?: DrawResultScalarWhereWithAggregatesInput | DrawResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DrawResult"> | number
    draw_date?: DateTimeWithAggregatesFilter<"DrawResult"> | Date | string
    prize1_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize2_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize3_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize4_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize5_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize6_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    prize7_number?: StringNullableWithAggregatesFilter<"DrawResult"> | string | null
    status?: EnumDrawStatusWithAggregatesFilter<"DrawResult"> | $Enums.DrawStatus
    draw_schedule_id?: IntWithAggregatesFilter<"DrawResult"> | number
  }

  export type BetWhereInput = {
    AND?: BetWhereInput | BetWhereInput[]
    OR?: BetWhereInput[]
    NOT?: BetWhereInput | BetWhereInput[]
    id?: IntFilter<"Bet"> | number
    numbers_betted?: StringFilter<"Bet"> | string
    amount_wagered?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFilter<"Bet"> | $Enums.BetStatus
    created_at?: DateTimeFilter<"Bet"> | Date | string
    user_id?: IntFilter<"Bet"> | number
    game_type_id?: IntFilter<"Bet"> | number
    bet_type_id?: IntFilter<"Bet"> | number
    prize_tier_id?: IntFilter<"Bet"> | number
    draw_result_id?: IntFilter<"Bet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game_type?: XOR<GameTypeScalarRelationFilter, GameTypeWhereInput>
    bet_type?: XOR<BetTypeScalarRelationFilter, BetTypeWhereInput>
    prize_tier?: XOR<PrizeTierScalarRelationFilter, PrizeTierWhereInput>
    draw_result?: XOR<DrawResultScalarRelationFilter, DrawResultWhereInput>
  }

  export type BetOrderByWithRelationInput = {
    id?: SortOrder
    numbers_betted?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
    user?: UserOrderByWithRelationInput
    game_type?: GameTypeOrderByWithRelationInput
    bet_type?: BetTypeOrderByWithRelationInput
    prize_tier?: PrizeTierOrderByWithRelationInput
    draw_result?: DrawResultOrderByWithRelationInput
  }

  export type BetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BetWhereInput | BetWhereInput[]
    OR?: BetWhereInput[]
    NOT?: BetWhereInput | BetWhereInput[]
    numbers_betted?: StringFilter<"Bet"> | string
    amount_wagered?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFilter<"Bet"> | $Enums.BetStatus
    created_at?: DateTimeFilter<"Bet"> | Date | string
    user_id?: IntFilter<"Bet"> | number
    game_type_id?: IntFilter<"Bet"> | number
    bet_type_id?: IntFilter<"Bet"> | number
    prize_tier_id?: IntFilter<"Bet"> | number
    draw_result_id?: IntFilter<"Bet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game_type?: XOR<GameTypeScalarRelationFilter, GameTypeWhereInput>
    bet_type?: XOR<BetTypeScalarRelationFilter, BetTypeWhereInput>
    prize_tier?: XOR<PrizeTierScalarRelationFilter, PrizeTierWhereInput>
    draw_result?: XOR<DrawResultScalarRelationFilter, DrawResultWhereInput>
  }, "id">

  export type BetOrderByWithAggregationInput = {
    id?: SortOrder
    numbers_betted?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
    _count?: BetCountOrderByAggregateInput
    _avg?: BetAvgOrderByAggregateInput
    _max?: BetMaxOrderByAggregateInput
    _min?: BetMinOrderByAggregateInput
    _sum?: BetSumOrderByAggregateInput
  }

  export type BetScalarWhereWithAggregatesInput = {
    AND?: BetScalarWhereWithAggregatesInput | BetScalarWhereWithAggregatesInput[]
    OR?: BetScalarWhereWithAggregatesInput[]
    NOT?: BetScalarWhereWithAggregatesInput | BetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bet"> | number
    numbers_betted?: StringWithAggregatesFilter<"Bet"> | string
    amount_wagered?: DecimalWithAggregatesFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalWithAggregatesFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusWithAggregatesFilter<"Bet"> | $Enums.BetStatus
    created_at?: DateTimeWithAggregatesFilter<"Bet"> | Date | string
    user_id?: IntWithAggregatesFilter<"Bet"> | number
    game_type_id?: IntWithAggregatesFilter<"Bet"> | number
    bet_type_id?: IntWithAggregatesFilter<"Bet"> | number
    prize_tier_id?: IntWithAggregatesFilter<"Bet"> | number
    draw_result_id?: IntWithAggregatesFilter<"Bet"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    virtual_credits?: Decimal | DecimalJsLike | number | string
    is_admin?: boolean
    bets?: BetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    virtual_credits?: Decimal | DecimalJsLike | number | string
    is_admin?: boolean
    bets?: BetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    bets?: BetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    bets?: BetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    virtual_credits?: Decimal | DecimalJsLike | number | string
    is_admin?: boolean
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameTypeCreateInput = {
    name: string
    description?: string | null
    bets?: BetCreateNestedManyWithoutGame_typeInput
  }

  export type GameTypeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    bets?: BetUncheckedCreateNestedManyWithoutGame_typeInput
  }

  export type GameTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bets?: BetUpdateManyWithoutGame_typeNestedInput
  }

  export type GameTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bets?: BetUncheckedUpdateManyWithoutGame_typeNestedInput
  }

  export type GameTypeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type GameTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrizeTierCreateInput = {
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    payout_rules?: PayoutRuleCreateNestedManyWithoutPrize_tierInput
    bets?: BetCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierUncheckedCreateInput = {
    id?: number
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    payout_rules?: PayoutRuleUncheckedCreateNestedManyWithoutPrize_tierInput
    bets?: BetUncheckedCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payout_rules?: PayoutRuleUpdateManyWithoutPrize_tierNestedInput
    bets?: BetUpdateManyWithoutPrize_tierNestedInput
  }

  export type PrizeTierUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payout_rules?: PayoutRuleUncheckedUpdateManyWithoutPrize_tierNestedInput
    bets?: BetUncheckedUpdateManyWithoutPrize_tierNestedInput
  }

  export type PrizeTierCreateManyInput = {
    id?: number
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
  }

  export type PrizeTierUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PrizeTierUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DrawScheduleCreateInput = {
    name: string
    draw_time: string
    bet_close_time: string
    draw_results?: DrawResultCreateNestedManyWithoutDraw_scheduleInput
  }

  export type DrawScheduleUncheckedCreateInput = {
    id?: number
    name: string
    draw_time: string
    bet_close_time: string
    draw_results?: DrawResultUncheckedCreateNestedManyWithoutDraw_scheduleInput
  }

  export type DrawScheduleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
    draw_results?: DrawResultUpdateManyWithoutDraw_scheduleNestedInput
  }

  export type DrawScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
    draw_results?: DrawResultUncheckedUpdateManyWithoutDraw_scheduleNestedInput
  }

  export type DrawScheduleCreateManyInput = {
    id?: number
    name: string
    draw_time: string
    bet_close_time: string
  }

  export type DrawScheduleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
  }

  export type DrawScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
  }

  export type BetTypeCreateInput = {
    name: string
    payout_rules?: PayoutRuleCreateNestedManyWithoutBet_typeInput
    bets?: BetCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeUncheckedCreateInput = {
    id?: number
    name: string
    payout_rules?: PayoutRuleUncheckedCreateNestedManyWithoutBet_typeInput
    bets?: BetUncheckedCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    payout_rules?: PayoutRuleUpdateManyWithoutBet_typeNestedInput
    bets?: BetUpdateManyWithoutBet_typeNestedInput
  }

  export type BetTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    payout_rules?: PayoutRuleUncheckedUpdateManyWithoutBet_typeNestedInput
    bets?: BetUncheckedUpdateManyWithoutBet_typeNestedInput
  }

  export type BetTypeCreateManyInput = {
    id?: number
    name: string
  }

  export type BetTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BetTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PayoutRuleCreateInput = {
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type: BetTypeCreateNestedOneWithoutPayout_rulesInput
    prize_tier: PrizeTierCreateNestedOneWithoutPayout_rulesInput
  }

  export type PayoutRuleUncheckedCreateInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type_id: number
    prize_tier_id: number
  }

  export type PayoutRuleUpdateInput = {
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type?: BetTypeUpdateOneRequiredWithoutPayout_rulesNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutPayout_rulesNestedInput
  }

  export type PayoutRuleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }

  export type PayoutRuleCreateManyInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type_id: number
    prize_tier_id: number
  }

  export type PayoutRuleUpdateManyMutationInput = {
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PayoutRuleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }

  export type DrawResultCreateInput = {
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    draw_schedule: DrawScheduleCreateNestedOneWithoutDraw_resultsInput
    bets?: BetCreateNestedManyWithoutDraw_resultInput
  }

  export type DrawResultUncheckedCreateInput = {
    id?: number
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    draw_schedule_id: number
    bets?: BetUncheckedCreateNestedManyWithoutDraw_resultInput
  }

  export type DrawResultUpdateInput = {
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    draw_schedule?: DrawScheduleUpdateOneRequiredWithoutDraw_resultsNestedInput
    bets?: BetUpdateManyWithoutDraw_resultNestedInput
  }

  export type DrawResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    draw_schedule_id?: IntFieldUpdateOperationsInput | number
    bets?: BetUncheckedUpdateManyWithoutDraw_resultNestedInput
  }

  export type DrawResultCreateManyInput = {
    id?: number
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    draw_schedule_id: number
  }

  export type DrawResultUpdateManyMutationInput = {
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
  }

  export type DrawResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    draw_schedule_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetCreateInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user: UserCreateNestedOneWithoutBetsInput
    game_type: GameTypeCreateNestedOneWithoutBetsInput
    bet_type: BetTypeCreateNestedOneWithoutBetsInput
    prize_tier: PrizeTierCreateNestedOneWithoutBetsInput
    draw_result: DrawResultCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetUpdateInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBetsNestedInput
    game_type?: GameTypeUpdateOneRequiredWithoutBetsNestedInput
    bet_type?: BetTypeUpdateOneRequiredWithoutBetsNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutBetsNestedInput
    draw_result?: DrawResultUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetCreateManyInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetUpdateManyMutationInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BetListRelationFilter = {
    every?: BetWhereInput
    some?: BetWhereInput
    none?: BetWhereInput
  }

  export type BetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    virtual_credits?: SortOrder
    is_admin?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    virtual_credits?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    virtual_credits?: SortOrder
    is_admin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    virtual_credits?: SortOrder
    is_admin?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    virtual_credits?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GameTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PayoutRuleListRelationFilter = {
    every?: PayoutRuleWhereInput
    some?: PayoutRuleWhereInput
    none?: PayoutRuleWhereInput
  }

  export type PayoutRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrizeTierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
    description?: SortOrder
  }

  export type PrizeTierAvgOrderByAggregateInput = {
    id?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
  }

  export type PrizeTierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
    description?: SortOrder
  }

  export type PrizeTierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
    description?: SortOrder
  }

  export type PrizeTierSumOrderByAggregateInput = {
    id?: SortOrder
    start_prize?: SortOrder
    end_prize?: SortOrder
  }

  export type DrawResultListRelationFilter = {
    every?: DrawResultWhereInput
    some?: DrawResultWhereInput
    none?: DrawResultWhereInput
  }

  export type DrawResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DrawScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    draw_time?: SortOrder
    bet_close_time?: SortOrder
  }

  export type DrawScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DrawScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    draw_time?: SortOrder
    bet_close_time?: SortOrder
  }

  export type DrawScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    draw_time?: SortOrder
    bet_close_time?: SortOrder
  }

  export type DrawScheduleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BetTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BetTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BetTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BetTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BetTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BetTypeScalarRelationFilter = {
    is?: BetTypeWhereInput
    isNot?: BetTypeWhereInput
  }

  export type PrizeTierScalarRelationFilter = {
    is?: PrizeTierWhereInput
    isNot?: PrizeTierWhereInput
  }

  export type PayoutRuleBet_type_idPrize_tier_idCompoundUniqueInput = {
    bet_type_id: number
    prize_tier_id: number
  }

  export type PayoutRuleCountOrderByAggregateInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
  }

  export type PayoutRuleAvgOrderByAggregateInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
  }

  export type PayoutRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
  }

  export type PayoutRuleMinOrderByAggregateInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
  }

  export type PayoutRuleSumOrderByAggregateInput = {
    id?: SortOrder
    payout_rate?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumDrawStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DrawStatus | EnumDrawStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DrawStatus[]
    notIn?: $Enums.DrawStatus[]
    not?: NestedEnumDrawStatusFilter<$PrismaModel> | $Enums.DrawStatus
  }

  export type DrawScheduleScalarRelationFilter = {
    is?: DrawScheduleWhereInput
    isNot?: DrawScheduleWhereInput
  }

  export type DrawResultDraw_schedule_idDraw_dateCompoundUniqueInput = {
    draw_schedule_id: number
    draw_date: Date | string
  }

  export type DrawResultCountOrderByAggregateInput = {
    id?: SortOrder
    draw_date?: SortOrder
    prize1_number?: SortOrder
    prize2_number?: SortOrder
    prize3_number?: SortOrder
    prize4_number?: SortOrder
    prize5_number?: SortOrder
    prize6_number?: SortOrder
    prize7_number?: SortOrder
    status?: SortOrder
    draw_schedule_id?: SortOrder
  }

  export type DrawResultAvgOrderByAggregateInput = {
    id?: SortOrder
    draw_schedule_id?: SortOrder
  }

  export type DrawResultMaxOrderByAggregateInput = {
    id?: SortOrder
    draw_date?: SortOrder
    prize1_number?: SortOrder
    prize2_number?: SortOrder
    prize3_number?: SortOrder
    prize4_number?: SortOrder
    prize5_number?: SortOrder
    prize6_number?: SortOrder
    prize7_number?: SortOrder
    status?: SortOrder
    draw_schedule_id?: SortOrder
  }

  export type DrawResultMinOrderByAggregateInput = {
    id?: SortOrder
    draw_date?: SortOrder
    prize1_number?: SortOrder
    prize2_number?: SortOrder
    prize3_number?: SortOrder
    prize4_number?: SortOrder
    prize5_number?: SortOrder
    prize6_number?: SortOrder
    prize7_number?: SortOrder
    status?: SortOrder
    draw_schedule_id?: SortOrder
  }

  export type DrawResultSumOrderByAggregateInput = {
    id?: SortOrder
    draw_schedule_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDrawStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DrawStatus | EnumDrawStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DrawStatus[]
    notIn?: $Enums.DrawStatus[]
    not?: NestedEnumDrawStatusWithAggregatesFilter<$PrismaModel> | $Enums.DrawStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDrawStatusFilter<$PrismaModel>
    _max?: NestedEnumDrawStatusFilter<$PrismaModel>
  }

  export type EnumBetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BetStatus | EnumBetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BetStatus[]
    notIn?: $Enums.BetStatus[]
    not?: NestedEnumBetStatusFilter<$PrismaModel> | $Enums.BetStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameTypeScalarRelationFilter = {
    is?: GameTypeWhereInput
    isNot?: GameTypeWhereInput
  }

  export type DrawResultScalarRelationFilter = {
    is?: DrawResultWhereInput
    isNot?: DrawResultWhereInput
  }

  export type BetCountOrderByAggregateInput = {
    id?: SortOrder
    numbers_betted?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
  }

  export type BetAvgOrderByAggregateInput = {
    id?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
  }

  export type BetMaxOrderByAggregateInput = {
    id?: SortOrder
    numbers_betted?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
  }

  export type BetMinOrderByAggregateInput = {
    id?: SortOrder
    numbers_betted?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
  }

  export type BetSumOrderByAggregateInput = {
    id?: SortOrder
    amount_wagered?: SortOrder
    amount_won?: SortOrder
    user_id?: SortOrder
    game_type_id?: SortOrder
    bet_type_id?: SortOrder
    prize_tier_id?: SortOrder
    draw_result_id?: SortOrder
  }

  export type EnumBetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BetStatus | EnumBetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BetStatus[]
    notIn?: $Enums.BetStatus[]
    not?: NestedEnumBetStatusWithAggregatesFilter<$PrismaModel> | $Enums.BetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBetStatusFilter<$PrismaModel>
    _max?: NestedEnumBetStatusFilter<$PrismaModel>
  }

  export type BetCreateNestedManyWithoutUserInput = {
    create?: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput> | BetCreateWithoutUserInput[] | BetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BetCreateOrConnectWithoutUserInput | BetCreateOrConnectWithoutUserInput[]
    createMany?: BetCreateManyUserInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type BetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput> | BetCreateWithoutUserInput[] | BetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BetCreateOrConnectWithoutUserInput | BetCreateOrConnectWithoutUserInput[]
    createMany?: BetCreateManyUserInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BetUpdateManyWithoutUserNestedInput = {
    create?: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput> | BetCreateWithoutUserInput[] | BetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BetCreateOrConnectWithoutUserInput | BetCreateOrConnectWithoutUserInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutUserInput | BetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BetCreateManyUserInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutUserInput | BetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BetUpdateManyWithWhereWithoutUserInput | BetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput> | BetCreateWithoutUserInput[] | BetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BetCreateOrConnectWithoutUserInput | BetCreateOrConnectWithoutUserInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutUserInput | BetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BetCreateManyUserInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutUserInput | BetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BetUpdateManyWithWhereWithoutUserInput | BetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type BetCreateNestedManyWithoutGame_typeInput = {
    create?: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput> | BetCreateWithoutGame_typeInput[] | BetUncheckedCreateWithoutGame_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutGame_typeInput | BetCreateOrConnectWithoutGame_typeInput[]
    createMany?: BetCreateManyGame_typeInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type BetUncheckedCreateNestedManyWithoutGame_typeInput = {
    create?: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput> | BetCreateWithoutGame_typeInput[] | BetUncheckedCreateWithoutGame_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutGame_typeInput | BetCreateOrConnectWithoutGame_typeInput[]
    createMany?: BetCreateManyGame_typeInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BetUpdateManyWithoutGame_typeNestedInput = {
    create?: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput> | BetCreateWithoutGame_typeInput[] | BetUncheckedCreateWithoutGame_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutGame_typeInput | BetCreateOrConnectWithoutGame_typeInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutGame_typeInput | BetUpsertWithWhereUniqueWithoutGame_typeInput[]
    createMany?: BetCreateManyGame_typeInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutGame_typeInput | BetUpdateWithWhereUniqueWithoutGame_typeInput[]
    updateMany?: BetUpdateManyWithWhereWithoutGame_typeInput | BetUpdateManyWithWhereWithoutGame_typeInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type BetUncheckedUpdateManyWithoutGame_typeNestedInput = {
    create?: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput> | BetCreateWithoutGame_typeInput[] | BetUncheckedCreateWithoutGame_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutGame_typeInput | BetCreateOrConnectWithoutGame_typeInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutGame_typeInput | BetUpsertWithWhereUniqueWithoutGame_typeInput[]
    createMany?: BetCreateManyGame_typeInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutGame_typeInput | BetUpdateWithWhereUniqueWithoutGame_typeInput[]
    updateMany?: BetUpdateManyWithWhereWithoutGame_typeInput | BetUpdateManyWithWhereWithoutGame_typeInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type PayoutRuleCreateNestedManyWithoutPrize_tierInput = {
    create?: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput> | PayoutRuleCreateWithoutPrize_tierInput[] | PayoutRuleUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutPrize_tierInput | PayoutRuleCreateOrConnectWithoutPrize_tierInput[]
    createMany?: PayoutRuleCreateManyPrize_tierInputEnvelope
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
  }

  export type BetCreateNestedManyWithoutPrize_tierInput = {
    create?: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput> | BetCreateWithoutPrize_tierInput[] | BetUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: BetCreateOrConnectWithoutPrize_tierInput | BetCreateOrConnectWithoutPrize_tierInput[]
    createMany?: BetCreateManyPrize_tierInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type PayoutRuleUncheckedCreateNestedManyWithoutPrize_tierInput = {
    create?: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput> | PayoutRuleCreateWithoutPrize_tierInput[] | PayoutRuleUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutPrize_tierInput | PayoutRuleCreateOrConnectWithoutPrize_tierInput[]
    createMany?: PayoutRuleCreateManyPrize_tierInputEnvelope
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
  }

  export type BetUncheckedCreateNestedManyWithoutPrize_tierInput = {
    create?: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput> | BetCreateWithoutPrize_tierInput[] | BetUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: BetCreateOrConnectWithoutPrize_tierInput | BetCreateOrConnectWithoutPrize_tierInput[]
    createMany?: BetCreateManyPrize_tierInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type PayoutRuleUpdateManyWithoutPrize_tierNestedInput = {
    create?: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput> | PayoutRuleCreateWithoutPrize_tierInput[] | PayoutRuleUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutPrize_tierInput | PayoutRuleCreateOrConnectWithoutPrize_tierInput[]
    upsert?: PayoutRuleUpsertWithWhereUniqueWithoutPrize_tierInput | PayoutRuleUpsertWithWhereUniqueWithoutPrize_tierInput[]
    createMany?: PayoutRuleCreateManyPrize_tierInputEnvelope
    set?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    disconnect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    delete?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    update?: PayoutRuleUpdateWithWhereUniqueWithoutPrize_tierInput | PayoutRuleUpdateWithWhereUniqueWithoutPrize_tierInput[]
    updateMany?: PayoutRuleUpdateManyWithWhereWithoutPrize_tierInput | PayoutRuleUpdateManyWithWhereWithoutPrize_tierInput[]
    deleteMany?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
  }

  export type BetUpdateManyWithoutPrize_tierNestedInput = {
    create?: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput> | BetCreateWithoutPrize_tierInput[] | BetUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: BetCreateOrConnectWithoutPrize_tierInput | BetCreateOrConnectWithoutPrize_tierInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutPrize_tierInput | BetUpsertWithWhereUniqueWithoutPrize_tierInput[]
    createMany?: BetCreateManyPrize_tierInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutPrize_tierInput | BetUpdateWithWhereUniqueWithoutPrize_tierInput[]
    updateMany?: BetUpdateManyWithWhereWithoutPrize_tierInput | BetUpdateManyWithWhereWithoutPrize_tierInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type PayoutRuleUncheckedUpdateManyWithoutPrize_tierNestedInput = {
    create?: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput> | PayoutRuleCreateWithoutPrize_tierInput[] | PayoutRuleUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutPrize_tierInput | PayoutRuleCreateOrConnectWithoutPrize_tierInput[]
    upsert?: PayoutRuleUpsertWithWhereUniqueWithoutPrize_tierInput | PayoutRuleUpsertWithWhereUniqueWithoutPrize_tierInput[]
    createMany?: PayoutRuleCreateManyPrize_tierInputEnvelope
    set?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    disconnect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    delete?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    update?: PayoutRuleUpdateWithWhereUniqueWithoutPrize_tierInput | PayoutRuleUpdateWithWhereUniqueWithoutPrize_tierInput[]
    updateMany?: PayoutRuleUpdateManyWithWhereWithoutPrize_tierInput | PayoutRuleUpdateManyWithWhereWithoutPrize_tierInput[]
    deleteMany?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
  }

  export type BetUncheckedUpdateManyWithoutPrize_tierNestedInput = {
    create?: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput> | BetCreateWithoutPrize_tierInput[] | BetUncheckedCreateWithoutPrize_tierInput[]
    connectOrCreate?: BetCreateOrConnectWithoutPrize_tierInput | BetCreateOrConnectWithoutPrize_tierInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutPrize_tierInput | BetUpsertWithWhereUniqueWithoutPrize_tierInput[]
    createMany?: BetCreateManyPrize_tierInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutPrize_tierInput | BetUpdateWithWhereUniqueWithoutPrize_tierInput[]
    updateMany?: BetUpdateManyWithWhereWithoutPrize_tierInput | BetUpdateManyWithWhereWithoutPrize_tierInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type DrawResultCreateNestedManyWithoutDraw_scheduleInput = {
    create?: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput> | DrawResultCreateWithoutDraw_scheduleInput[] | DrawResultUncheckedCreateWithoutDraw_scheduleInput[]
    connectOrCreate?: DrawResultCreateOrConnectWithoutDraw_scheduleInput | DrawResultCreateOrConnectWithoutDraw_scheduleInput[]
    createMany?: DrawResultCreateManyDraw_scheduleInputEnvelope
    connect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
  }

  export type DrawResultUncheckedCreateNestedManyWithoutDraw_scheduleInput = {
    create?: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput> | DrawResultCreateWithoutDraw_scheduleInput[] | DrawResultUncheckedCreateWithoutDraw_scheduleInput[]
    connectOrCreate?: DrawResultCreateOrConnectWithoutDraw_scheduleInput | DrawResultCreateOrConnectWithoutDraw_scheduleInput[]
    createMany?: DrawResultCreateManyDraw_scheduleInputEnvelope
    connect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
  }

  export type DrawResultUpdateManyWithoutDraw_scheduleNestedInput = {
    create?: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput> | DrawResultCreateWithoutDraw_scheduleInput[] | DrawResultUncheckedCreateWithoutDraw_scheduleInput[]
    connectOrCreate?: DrawResultCreateOrConnectWithoutDraw_scheduleInput | DrawResultCreateOrConnectWithoutDraw_scheduleInput[]
    upsert?: DrawResultUpsertWithWhereUniqueWithoutDraw_scheduleInput | DrawResultUpsertWithWhereUniqueWithoutDraw_scheduleInput[]
    createMany?: DrawResultCreateManyDraw_scheduleInputEnvelope
    set?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    disconnect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    delete?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    connect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    update?: DrawResultUpdateWithWhereUniqueWithoutDraw_scheduleInput | DrawResultUpdateWithWhereUniqueWithoutDraw_scheduleInput[]
    updateMany?: DrawResultUpdateManyWithWhereWithoutDraw_scheduleInput | DrawResultUpdateManyWithWhereWithoutDraw_scheduleInput[]
    deleteMany?: DrawResultScalarWhereInput | DrawResultScalarWhereInput[]
  }

  export type DrawResultUncheckedUpdateManyWithoutDraw_scheduleNestedInput = {
    create?: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput> | DrawResultCreateWithoutDraw_scheduleInput[] | DrawResultUncheckedCreateWithoutDraw_scheduleInput[]
    connectOrCreate?: DrawResultCreateOrConnectWithoutDraw_scheduleInput | DrawResultCreateOrConnectWithoutDraw_scheduleInput[]
    upsert?: DrawResultUpsertWithWhereUniqueWithoutDraw_scheduleInput | DrawResultUpsertWithWhereUniqueWithoutDraw_scheduleInput[]
    createMany?: DrawResultCreateManyDraw_scheduleInputEnvelope
    set?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    disconnect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    delete?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    connect?: DrawResultWhereUniqueInput | DrawResultWhereUniqueInput[]
    update?: DrawResultUpdateWithWhereUniqueWithoutDraw_scheduleInput | DrawResultUpdateWithWhereUniqueWithoutDraw_scheduleInput[]
    updateMany?: DrawResultUpdateManyWithWhereWithoutDraw_scheduleInput | DrawResultUpdateManyWithWhereWithoutDraw_scheduleInput[]
    deleteMany?: DrawResultScalarWhereInput | DrawResultScalarWhereInput[]
  }

  export type PayoutRuleCreateNestedManyWithoutBet_typeInput = {
    create?: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput> | PayoutRuleCreateWithoutBet_typeInput[] | PayoutRuleUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutBet_typeInput | PayoutRuleCreateOrConnectWithoutBet_typeInput[]
    createMany?: PayoutRuleCreateManyBet_typeInputEnvelope
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
  }

  export type BetCreateNestedManyWithoutBet_typeInput = {
    create?: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput> | BetCreateWithoutBet_typeInput[] | BetUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutBet_typeInput | BetCreateOrConnectWithoutBet_typeInput[]
    createMany?: BetCreateManyBet_typeInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type PayoutRuleUncheckedCreateNestedManyWithoutBet_typeInput = {
    create?: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput> | PayoutRuleCreateWithoutBet_typeInput[] | PayoutRuleUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutBet_typeInput | PayoutRuleCreateOrConnectWithoutBet_typeInput[]
    createMany?: PayoutRuleCreateManyBet_typeInputEnvelope
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
  }

  export type BetUncheckedCreateNestedManyWithoutBet_typeInput = {
    create?: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput> | BetCreateWithoutBet_typeInput[] | BetUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutBet_typeInput | BetCreateOrConnectWithoutBet_typeInput[]
    createMany?: BetCreateManyBet_typeInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type PayoutRuleUpdateManyWithoutBet_typeNestedInput = {
    create?: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput> | PayoutRuleCreateWithoutBet_typeInput[] | PayoutRuleUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutBet_typeInput | PayoutRuleCreateOrConnectWithoutBet_typeInput[]
    upsert?: PayoutRuleUpsertWithWhereUniqueWithoutBet_typeInput | PayoutRuleUpsertWithWhereUniqueWithoutBet_typeInput[]
    createMany?: PayoutRuleCreateManyBet_typeInputEnvelope
    set?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    disconnect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    delete?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    update?: PayoutRuleUpdateWithWhereUniqueWithoutBet_typeInput | PayoutRuleUpdateWithWhereUniqueWithoutBet_typeInput[]
    updateMany?: PayoutRuleUpdateManyWithWhereWithoutBet_typeInput | PayoutRuleUpdateManyWithWhereWithoutBet_typeInput[]
    deleteMany?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
  }

  export type BetUpdateManyWithoutBet_typeNestedInput = {
    create?: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput> | BetCreateWithoutBet_typeInput[] | BetUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutBet_typeInput | BetCreateOrConnectWithoutBet_typeInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutBet_typeInput | BetUpsertWithWhereUniqueWithoutBet_typeInput[]
    createMany?: BetCreateManyBet_typeInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutBet_typeInput | BetUpdateWithWhereUniqueWithoutBet_typeInput[]
    updateMany?: BetUpdateManyWithWhereWithoutBet_typeInput | BetUpdateManyWithWhereWithoutBet_typeInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type PayoutRuleUncheckedUpdateManyWithoutBet_typeNestedInput = {
    create?: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput> | PayoutRuleCreateWithoutBet_typeInput[] | PayoutRuleUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: PayoutRuleCreateOrConnectWithoutBet_typeInput | PayoutRuleCreateOrConnectWithoutBet_typeInput[]
    upsert?: PayoutRuleUpsertWithWhereUniqueWithoutBet_typeInput | PayoutRuleUpsertWithWhereUniqueWithoutBet_typeInput[]
    createMany?: PayoutRuleCreateManyBet_typeInputEnvelope
    set?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    disconnect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    delete?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    connect?: PayoutRuleWhereUniqueInput | PayoutRuleWhereUniqueInput[]
    update?: PayoutRuleUpdateWithWhereUniqueWithoutBet_typeInput | PayoutRuleUpdateWithWhereUniqueWithoutBet_typeInput[]
    updateMany?: PayoutRuleUpdateManyWithWhereWithoutBet_typeInput | PayoutRuleUpdateManyWithWhereWithoutBet_typeInput[]
    deleteMany?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
  }

  export type BetUncheckedUpdateManyWithoutBet_typeNestedInput = {
    create?: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput> | BetCreateWithoutBet_typeInput[] | BetUncheckedCreateWithoutBet_typeInput[]
    connectOrCreate?: BetCreateOrConnectWithoutBet_typeInput | BetCreateOrConnectWithoutBet_typeInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutBet_typeInput | BetUpsertWithWhereUniqueWithoutBet_typeInput[]
    createMany?: BetCreateManyBet_typeInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutBet_typeInput | BetUpdateWithWhereUniqueWithoutBet_typeInput[]
    updateMany?: BetUpdateManyWithWhereWithoutBet_typeInput | BetUpdateManyWithWhereWithoutBet_typeInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type BetTypeCreateNestedOneWithoutPayout_rulesInput = {
    create?: XOR<BetTypeCreateWithoutPayout_rulesInput, BetTypeUncheckedCreateWithoutPayout_rulesInput>
    connectOrCreate?: BetTypeCreateOrConnectWithoutPayout_rulesInput
    connect?: BetTypeWhereUniqueInput
  }

  export type PrizeTierCreateNestedOneWithoutPayout_rulesInput = {
    create?: XOR<PrizeTierCreateWithoutPayout_rulesInput, PrizeTierUncheckedCreateWithoutPayout_rulesInput>
    connectOrCreate?: PrizeTierCreateOrConnectWithoutPayout_rulesInput
    connect?: PrizeTierWhereUniqueInput
  }

  export type BetTypeUpdateOneRequiredWithoutPayout_rulesNestedInput = {
    create?: XOR<BetTypeCreateWithoutPayout_rulesInput, BetTypeUncheckedCreateWithoutPayout_rulesInput>
    connectOrCreate?: BetTypeCreateOrConnectWithoutPayout_rulesInput
    upsert?: BetTypeUpsertWithoutPayout_rulesInput
    connect?: BetTypeWhereUniqueInput
    update?: XOR<XOR<BetTypeUpdateToOneWithWhereWithoutPayout_rulesInput, BetTypeUpdateWithoutPayout_rulesInput>, BetTypeUncheckedUpdateWithoutPayout_rulesInput>
  }

  export type PrizeTierUpdateOneRequiredWithoutPayout_rulesNestedInput = {
    create?: XOR<PrizeTierCreateWithoutPayout_rulesInput, PrizeTierUncheckedCreateWithoutPayout_rulesInput>
    connectOrCreate?: PrizeTierCreateOrConnectWithoutPayout_rulesInput
    upsert?: PrizeTierUpsertWithoutPayout_rulesInput
    connect?: PrizeTierWhereUniqueInput
    update?: XOR<XOR<PrizeTierUpdateToOneWithWhereWithoutPayout_rulesInput, PrizeTierUpdateWithoutPayout_rulesInput>, PrizeTierUncheckedUpdateWithoutPayout_rulesInput>
  }

  export type DrawScheduleCreateNestedOneWithoutDraw_resultsInput = {
    create?: XOR<DrawScheduleCreateWithoutDraw_resultsInput, DrawScheduleUncheckedCreateWithoutDraw_resultsInput>
    connectOrCreate?: DrawScheduleCreateOrConnectWithoutDraw_resultsInput
    connect?: DrawScheduleWhereUniqueInput
  }

  export type BetCreateNestedManyWithoutDraw_resultInput = {
    create?: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput> | BetCreateWithoutDraw_resultInput[] | BetUncheckedCreateWithoutDraw_resultInput[]
    connectOrCreate?: BetCreateOrConnectWithoutDraw_resultInput | BetCreateOrConnectWithoutDraw_resultInput[]
    createMany?: BetCreateManyDraw_resultInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type BetUncheckedCreateNestedManyWithoutDraw_resultInput = {
    create?: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput> | BetCreateWithoutDraw_resultInput[] | BetUncheckedCreateWithoutDraw_resultInput[]
    connectOrCreate?: BetCreateOrConnectWithoutDraw_resultInput | BetCreateOrConnectWithoutDraw_resultInput[]
    createMany?: BetCreateManyDraw_resultInputEnvelope
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumDrawStatusFieldUpdateOperationsInput = {
    set?: $Enums.DrawStatus
  }

  export type DrawScheduleUpdateOneRequiredWithoutDraw_resultsNestedInput = {
    create?: XOR<DrawScheduleCreateWithoutDraw_resultsInput, DrawScheduleUncheckedCreateWithoutDraw_resultsInput>
    connectOrCreate?: DrawScheduleCreateOrConnectWithoutDraw_resultsInput
    upsert?: DrawScheduleUpsertWithoutDraw_resultsInput
    connect?: DrawScheduleWhereUniqueInput
    update?: XOR<XOR<DrawScheduleUpdateToOneWithWhereWithoutDraw_resultsInput, DrawScheduleUpdateWithoutDraw_resultsInput>, DrawScheduleUncheckedUpdateWithoutDraw_resultsInput>
  }

  export type BetUpdateManyWithoutDraw_resultNestedInput = {
    create?: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput> | BetCreateWithoutDraw_resultInput[] | BetUncheckedCreateWithoutDraw_resultInput[]
    connectOrCreate?: BetCreateOrConnectWithoutDraw_resultInput | BetCreateOrConnectWithoutDraw_resultInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutDraw_resultInput | BetUpsertWithWhereUniqueWithoutDraw_resultInput[]
    createMany?: BetCreateManyDraw_resultInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutDraw_resultInput | BetUpdateWithWhereUniqueWithoutDraw_resultInput[]
    updateMany?: BetUpdateManyWithWhereWithoutDraw_resultInput | BetUpdateManyWithWhereWithoutDraw_resultInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type BetUncheckedUpdateManyWithoutDraw_resultNestedInput = {
    create?: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput> | BetCreateWithoutDraw_resultInput[] | BetUncheckedCreateWithoutDraw_resultInput[]
    connectOrCreate?: BetCreateOrConnectWithoutDraw_resultInput | BetCreateOrConnectWithoutDraw_resultInput[]
    upsert?: BetUpsertWithWhereUniqueWithoutDraw_resultInput | BetUpsertWithWhereUniqueWithoutDraw_resultInput[]
    createMany?: BetCreateManyDraw_resultInputEnvelope
    set?: BetWhereUniqueInput | BetWhereUniqueInput[]
    disconnect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    delete?: BetWhereUniqueInput | BetWhereUniqueInput[]
    connect?: BetWhereUniqueInput | BetWhereUniqueInput[]
    update?: BetUpdateWithWhereUniqueWithoutDraw_resultInput | BetUpdateWithWhereUniqueWithoutDraw_resultInput[]
    updateMany?: BetUpdateManyWithWhereWithoutDraw_resultInput | BetUpdateManyWithWhereWithoutDraw_resultInput[]
    deleteMany?: BetScalarWhereInput | BetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBetsInput = {
    create?: XOR<UserCreateWithoutBetsInput, UserUncheckedCreateWithoutBetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBetsInput
    connect?: UserWhereUniqueInput
  }

  export type GameTypeCreateNestedOneWithoutBetsInput = {
    create?: XOR<GameTypeCreateWithoutBetsInput, GameTypeUncheckedCreateWithoutBetsInput>
    connectOrCreate?: GameTypeCreateOrConnectWithoutBetsInput
    connect?: GameTypeWhereUniqueInput
  }

  export type BetTypeCreateNestedOneWithoutBetsInput = {
    create?: XOR<BetTypeCreateWithoutBetsInput, BetTypeUncheckedCreateWithoutBetsInput>
    connectOrCreate?: BetTypeCreateOrConnectWithoutBetsInput
    connect?: BetTypeWhereUniqueInput
  }

  export type PrizeTierCreateNestedOneWithoutBetsInput = {
    create?: XOR<PrizeTierCreateWithoutBetsInput, PrizeTierUncheckedCreateWithoutBetsInput>
    connectOrCreate?: PrizeTierCreateOrConnectWithoutBetsInput
    connect?: PrizeTierWhereUniqueInput
  }

  export type DrawResultCreateNestedOneWithoutBetsInput = {
    create?: XOR<DrawResultCreateWithoutBetsInput, DrawResultUncheckedCreateWithoutBetsInput>
    connectOrCreate?: DrawResultCreateOrConnectWithoutBetsInput
    connect?: DrawResultWhereUniqueInput
  }

  export type EnumBetStatusFieldUpdateOperationsInput = {
    set?: $Enums.BetStatus
  }

  export type UserUpdateOneRequiredWithoutBetsNestedInput = {
    create?: XOR<UserCreateWithoutBetsInput, UserUncheckedCreateWithoutBetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBetsInput
    upsert?: UserUpsertWithoutBetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBetsInput, UserUpdateWithoutBetsInput>, UserUncheckedUpdateWithoutBetsInput>
  }

  export type GameTypeUpdateOneRequiredWithoutBetsNestedInput = {
    create?: XOR<GameTypeCreateWithoutBetsInput, GameTypeUncheckedCreateWithoutBetsInput>
    connectOrCreate?: GameTypeCreateOrConnectWithoutBetsInput
    upsert?: GameTypeUpsertWithoutBetsInput
    connect?: GameTypeWhereUniqueInput
    update?: XOR<XOR<GameTypeUpdateToOneWithWhereWithoutBetsInput, GameTypeUpdateWithoutBetsInput>, GameTypeUncheckedUpdateWithoutBetsInput>
  }

  export type BetTypeUpdateOneRequiredWithoutBetsNestedInput = {
    create?: XOR<BetTypeCreateWithoutBetsInput, BetTypeUncheckedCreateWithoutBetsInput>
    connectOrCreate?: BetTypeCreateOrConnectWithoutBetsInput
    upsert?: BetTypeUpsertWithoutBetsInput
    connect?: BetTypeWhereUniqueInput
    update?: XOR<XOR<BetTypeUpdateToOneWithWhereWithoutBetsInput, BetTypeUpdateWithoutBetsInput>, BetTypeUncheckedUpdateWithoutBetsInput>
  }

  export type PrizeTierUpdateOneRequiredWithoutBetsNestedInput = {
    create?: XOR<PrizeTierCreateWithoutBetsInput, PrizeTierUncheckedCreateWithoutBetsInput>
    connectOrCreate?: PrizeTierCreateOrConnectWithoutBetsInput
    upsert?: PrizeTierUpsertWithoutBetsInput
    connect?: PrizeTierWhereUniqueInput
    update?: XOR<XOR<PrizeTierUpdateToOneWithWhereWithoutBetsInput, PrizeTierUpdateWithoutBetsInput>, PrizeTierUncheckedUpdateWithoutBetsInput>
  }

  export type DrawResultUpdateOneRequiredWithoutBetsNestedInput = {
    create?: XOR<DrawResultCreateWithoutBetsInput, DrawResultUncheckedCreateWithoutBetsInput>
    connectOrCreate?: DrawResultCreateOrConnectWithoutBetsInput
    upsert?: DrawResultUpsertWithoutBetsInput
    connect?: DrawResultWhereUniqueInput
    update?: XOR<XOR<DrawResultUpdateToOneWithWhereWithoutBetsInput, DrawResultUpdateWithoutBetsInput>, DrawResultUncheckedUpdateWithoutBetsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumDrawStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DrawStatus | EnumDrawStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DrawStatus[]
    notIn?: $Enums.DrawStatus[]
    not?: NestedEnumDrawStatusFilter<$PrismaModel> | $Enums.DrawStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDrawStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DrawStatus | EnumDrawStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DrawStatus[]
    notIn?: $Enums.DrawStatus[]
    not?: NestedEnumDrawStatusWithAggregatesFilter<$PrismaModel> | $Enums.DrawStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDrawStatusFilter<$PrismaModel>
    _max?: NestedEnumDrawStatusFilter<$PrismaModel>
  }

  export type NestedEnumBetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BetStatus | EnumBetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BetStatus[]
    notIn?: $Enums.BetStatus[]
    not?: NestedEnumBetStatusFilter<$PrismaModel> | $Enums.BetStatus
  }

  export type NestedEnumBetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BetStatus | EnumBetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BetStatus[]
    notIn?: $Enums.BetStatus[]
    not?: NestedEnumBetStatusWithAggregatesFilter<$PrismaModel> | $Enums.BetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBetStatusFilter<$PrismaModel>
    _max?: NestedEnumBetStatusFilter<$PrismaModel>
  }

  export type BetCreateWithoutUserInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    game_type: GameTypeCreateNestedOneWithoutBetsInput
    bet_type: BetTypeCreateNestedOneWithoutBetsInput
    prize_tier: PrizeTierCreateNestedOneWithoutBetsInput
    draw_result: DrawResultCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateWithoutUserInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetCreateOrConnectWithoutUserInput = {
    where: BetWhereUniqueInput
    create: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput>
  }

  export type BetCreateManyUserInputEnvelope = {
    data: BetCreateManyUserInput | BetCreateManyUserInput[]
  }

  export type BetUpsertWithWhereUniqueWithoutUserInput = {
    where: BetWhereUniqueInput
    update: XOR<BetUpdateWithoutUserInput, BetUncheckedUpdateWithoutUserInput>
    create: XOR<BetCreateWithoutUserInput, BetUncheckedCreateWithoutUserInput>
  }

  export type BetUpdateWithWhereUniqueWithoutUserInput = {
    where: BetWhereUniqueInput
    data: XOR<BetUpdateWithoutUserInput, BetUncheckedUpdateWithoutUserInput>
  }

  export type BetUpdateManyWithWhereWithoutUserInput = {
    where: BetScalarWhereInput
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyWithoutUserInput>
  }

  export type BetScalarWhereInput = {
    AND?: BetScalarWhereInput | BetScalarWhereInput[]
    OR?: BetScalarWhereInput[]
    NOT?: BetScalarWhereInput | BetScalarWhereInput[]
    id?: IntFilter<"Bet"> | number
    numbers_betted?: StringFilter<"Bet"> | string
    amount_wagered?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFilter<"Bet"> | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFilter<"Bet"> | $Enums.BetStatus
    created_at?: DateTimeFilter<"Bet"> | Date | string
    user_id?: IntFilter<"Bet"> | number
    game_type_id?: IntFilter<"Bet"> | number
    bet_type_id?: IntFilter<"Bet"> | number
    prize_tier_id?: IntFilter<"Bet"> | number
    draw_result_id?: IntFilter<"Bet"> | number
  }

  export type BetCreateWithoutGame_typeInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user: UserCreateNestedOneWithoutBetsInput
    bet_type: BetTypeCreateNestedOneWithoutBetsInput
    prize_tier: PrizeTierCreateNestedOneWithoutBetsInput
    draw_result: DrawResultCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateWithoutGame_typeInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetCreateOrConnectWithoutGame_typeInput = {
    where: BetWhereUniqueInput
    create: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput>
  }

  export type BetCreateManyGame_typeInputEnvelope = {
    data: BetCreateManyGame_typeInput | BetCreateManyGame_typeInput[]
  }

  export type BetUpsertWithWhereUniqueWithoutGame_typeInput = {
    where: BetWhereUniqueInput
    update: XOR<BetUpdateWithoutGame_typeInput, BetUncheckedUpdateWithoutGame_typeInput>
    create: XOR<BetCreateWithoutGame_typeInput, BetUncheckedCreateWithoutGame_typeInput>
  }

  export type BetUpdateWithWhereUniqueWithoutGame_typeInput = {
    where: BetWhereUniqueInput
    data: XOR<BetUpdateWithoutGame_typeInput, BetUncheckedUpdateWithoutGame_typeInput>
  }

  export type BetUpdateManyWithWhereWithoutGame_typeInput = {
    where: BetScalarWhereInput
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyWithoutGame_typeInput>
  }

  export type PayoutRuleCreateWithoutPrize_tierInput = {
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type: BetTypeCreateNestedOneWithoutPayout_rulesInput
  }

  export type PayoutRuleUncheckedCreateWithoutPrize_tierInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type_id: number
  }

  export type PayoutRuleCreateOrConnectWithoutPrize_tierInput = {
    where: PayoutRuleWhereUniqueInput
    create: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput>
  }

  export type PayoutRuleCreateManyPrize_tierInputEnvelope = {
    data: PayoutRuleCreateManyPrize_tierInput | PayoutRuleCreateManyPrize_tierInput[]
  }

  export type BetCreateWithoutPrize_tierInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user: UserCreateNestedOneWithoutBetsInput
    game_type: GameTypeCreateNestedOneWithoutBetsInput
    bet_type: BetTypeCreateNestedOneWithoutBetsInput
    draw_result: DrawResultCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateWithoutPrize_tierInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    draw_result_id: number
  }

  export type BetCreateOrConnectWithoutPrize_tierInput = {
    where: BetWhereUniqueInput
    create: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput>
  }

  export type BetCreateManyPrize_tierInputEnvelope = {
    data: BetCreateManyPrize_tierInput | BetCreateManyPrize_tierInput[]
  }

  export type PayoutRuleUpsertWithWhereUniqueWithoutPrize_tierInput = {
    where: PayoutRuleWhereUniqueInput
    update: XOR<PayoutRuleUpdateWithoutPrize_tierInput, PayoutRuleUncheckedUpdateWithoutPrize_tierInput>
    create: XOR<PayoutRuleCreateWithoutPrize_tierInput, PayoutRuleUncheckedCreateWithoutPrize_tierInput>
  }

  export type PayoutRuleUpdateWithWhereUniqueWithoutPrize_tierInput = {
    where: PayoutRuleWhereUniqueInput
    data: XOR<PayoutRuleUpdateWithoutPrize_tierInput, PayoutRuleUncheckedUpdateWithoutPrize_tierInput>
  }

  export type PayoutRuleUpdateManyWithWhereWithoutPrize_tierInput = {
    where: PayoutRuleScalarWhereInput
    data: XOR<PayoutRuleUpdateManyMutationInput, PayoutRuleUncheckedUpdateManyWithoutPrize_tierInput>
  }

  export type PayoutRuleScalarWhereInput = {
    AND?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
    OR?: PayoutRuleScalarWhereInput[]
    NOT?: PayoutRuleScalarWhereInput | PayoutRuleScalarWhereInput[]
    id?: IntFilter<"PayoutRule"> | number
    payout_rate?: DecimalFilter<"PayoutRule"> | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFilter<"PayoutRule"> | number
    prize_tier_id?: IntFilter<"PayoutRule"> | number
  }

  export type BetUpsertWithWhereUniqueWithoutPrize_tierInput = {
    where: BetWhereUniqueInput
    update: XOR<BetUpdateWithoutPrize_tierInput, BetUncheckedUpdateWithoutPrize_tierInput>
    create: XOR<BetCreateWithoutPrize_tierInput, BetUncheckedCreateWithoutPrize_tierInput>
  }

  export type BetUpdateWithWhereUniqueWithoutPrize_tierInput = {
    where: BetWhereUniqueInput
    data: XOR<BetUpdateWithoutPrize_tierInput, BetUncheckedUpdateWithoutPrize_tierInput>
  }

  export type BetUpdateManyWithWhereWithoutPrize_tierInput = {
    where: BetScalarWhereInput
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyWithoutPrize_tierInput>
  }

  export type DrawResultCreateWithoutDraw_scheduleInput = {
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    bets?: BetCreateNestedManyWithoutDraw_resultInput
  }

  export type DrawResultUncheckedCreateWithoutDraw_scheduleInput = {
    id?: number
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    bets?: BetUncheckedCreateNestedManyWithoutDraw_resultInput
  }

  export type DrawResultCreateOrConnectWithoutDraw_scheduleInput = {
    where: DrawResultWhereUniqueInput
    create: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput>
  }

  export type DrawResultCreateManyDraw_scheduleInputEnvelope = {
    data: DrawResultCreateManyDraw_scheduleInput | DrawResultCreateManyDraw_scheduleInput[]
  }

  export type DrawResultUpsertWithWhereUniqueWithoutDraw_scheduleInput = {
    where: DrawResultWhereUniqueInput
    update: XOR<DrawResultUpdateWithoutDraw_scheduleInput, DrawResultUncheckedUpdateWithoutDraw_scheduleInput>
    create: XOR<DrawResultCreateWithoutDraw_scheduleInput, DrawResultUncheckedCreateWithoutDraw_scheduleInput>
  }

  export type DrawResultUpdateWithWhereUniqueWithoutDraw_scheduleInput = {
    where: DrawResultWhereUniqueInput
    data: XOR<DrawResultUpdateWithoutDraw_scheduleInput, DrawResultUncheckedUpdateWithoutDraw_scheduleInput>
  }

  export type DrawResultUpdateManyWithWhereWithoutDraw_scheduleInput = {
    where: DrawResultScalarWhereInput
    data: XOR<DrawResultUpdateManyMutationInput, DrawResultUncheckedUpdateManyWithoutDraw_scheduleInput>
  }

  export type DrawResultScalarWhereInput = {
    AND?: DrawResultScalarWhereInput | DrawResultScalarWhereInput[]
    OR?: DrawResultScalarWhereInput[]
    NOT?: DrawResultScalarWhereInput | DrawResultScalarWhereInput[]
    id?: IntFilter<"DrawResult"> | number
    draw_date?: DateTimeFilter<"DrawResult"> | Date | string
    prize1_number?: StringNullableFilter<"DrawResult"> | string | null
    prize2_number?: StringNullableFilter<"DrawResult"> | string | null
    prize3_number?: StringNullableFilter<"DrawResult"> | string | null
    prize4_number?: StringNullableFilter<"DrawResult"> | string | null
    prize5_number?: StringNullableFilter<"DrawResult"> | string | null
    prize6_number?: StringNullableFilter<"DrawResult"> | string | null
    prize7_number?: StringNullableFilter<"DrawResult"> | string | null
    status?: EnumDrawStatusFilter<"DrawResult"> | $Enums.DrawStatus
    draw_schedule_id?: IntFilter<"DrawResult"> | number
  }

  export type PayoutRuleCreateWithoutBet_typeInput = {
    payout_rate: Decimal | DecimalJsLike | number | string
    prize_tier: PrizeTierCreateNestedOneWithoutPayout_rulesInput
  }

  export type PayoutRuleUncheckedCreateWithoutBet_typeInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    prize_tier_id: number
  }

  export type PayoutRuleCreateOrConnectWithoutBet_typeInput = {
    where: PayoutRuleWhereUniqueInput
    create: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput>
  }

  export type PayoutRuleCreateManyBet_typeInputEnvelope = {
    data: PayoutRuleCreateManyBet_typeInput | PayoutRuleCreateManyBet_typeInput[]
  }

  export type BetCreateWithoutBet_typeInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user: UserCreateNestedOneWithoutBetsInput
    game_type: GameTypeCreateNestedOneWithoutBetsInput
    prize_tier: PrizeTierCreateNestedOneWithoutBetsInput
    draw_result: DrawResultCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateWithoutBet_typeInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetCreateOrConnectWithoutBet_typeInput = {
    where: BetWhereUniqueInput
    create: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput>
  }

  export type BetCreateManyBet_typeInputEnvelope = {
    data: BetCreateManyBet_typeInput | BetCreateManyBet_typeInput[]
  }

  export type PayoutRuleUpsertWithWhereUniqueWithoutBet_typeInput = {
    where: PayoutRuleWhereUniqueInput
    update: XOR<PayoutRuleUpdateWithoutBet_typeInput, PayoutRuleUncheckedUpdateWithoutBet_typeInput>
    create: XOR<PayoutRuleCreateWithoutBet_typeInput, PayoutRuleUncheckedCreateWithoutBet_typeInput>
  }

  export type PayoutRuleUpdateWithWhereUniqueWithoutBet_typeInput = {
    where: PayoutRuleWhereUniqueInput
    data: XOR<PayoutRuleUpdateWithoutBet_typeInput, PayoutRuleUncheckedUpdateWithoutBet_typeInput>
  }

  export type PayoutRuleUpdateManyWithWhereWithoutBet_typeInput = {
    where: PayoutRuleScalarWhereInput
    data: XOR<PayoutRuleUpdateManyMutationInput, PayoutRuleUncheckedUpdateManyWithoutBet_typeInput>
  }

  export type BetUpsertWithWhereUniqueWithoutBet_typeInput = {
    where: BetWhereUniqueInput
    update: XOR<BetUpdateWithoutBet_typeInput, BetUncheckedUpdateWithoutBet_typeInput>
    create: XOR<BetCreateWithoutBet_typeInput, BetUncheckedCreateWithoutBet_typeInput>
  }

  export type BetUpdateWithWhereUniqueWithoutBet_typeInput = {
    where: BetWhereUniqueInput
    data: XOR<BetUpdateWithoutBet_typeInput, BetUncheckedUpdateWithoutBet_typeInput>
  }

  export type BetUpdateManyWithWhereWithoutBet_typeInput = {
    where: BetScalarWhereInput
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyWithoutBet_typeInput>
  }

  export type BetTypeCreateWithoutPayout_rulesInput = {
    name: string
    bets?: BetCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeUncheckedCreateWithoutPayout_rulesInput = {
    id?: number
    name: string
    bets?: BetUncheckedCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeCreateOrConnectWithoutPayout_rulesInput = {
    where: BetTypeWhereUniqueInput
    create: XOR<BetTypeCreateWithoutPayout_rulesInput, BetTypeUncheckedCreateWithoutPayout_rulesInput>
  }

  export type PrizeTierCreateWithoutPayout_rulesInput = {
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    bets?: BetCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierUncheckedCreateWithoutPayout_rulesInput = {
    id?: number
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    bets?: BetUncheckedCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierCreateOrConnectWithoutPayout_rulesInput = {
    where: PrizeTierWhereUniqueInput
    create: XOR<PrizeTierCreateWithoutPayout_rulesInput, PrizeTierUncheckedCreateWithoutPayout_rulesInput>
  }

  export type BetTypeUpsertWithoutPayout_rulesInput = {
    update: XOR<BetTypeUpdateWithoutPayout_rulesInput, BetTypeUncheckedUpdateWithoutPayout_rulesInput>
    create: XOR<BetTypeCreateWithoutPayout_rulesInput, BetTypeUncheckedCreateWithoutPayout_rulesInput>
    where?: BetTypeWhereInput
  }

  export type BetTypeUpdateToOneWithWhereWithoutPayout_rulesInput = {
    where?: BetTypeWhereInput
    data: XOR<BetTypeUpdateWithoutPayout_rulesInput, BetTypeUncheckedUpdateWithoutPayout_rulesInput>
  }

  export type BetTypeUpdateWithoutPayout_rulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    bets?: BetUpdateManyWithoutBet_typeNestedInput
  }

  export type BetTypeUncheckedUpdateWithoutPayout_rulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    bets?: BetUncheckedUpdateManyWithoutBet_typeNestedInput
  }

  export type PrizeTierUpsertWithoutPayout_rulesInput = {
    update: XOR<PrizeTierUpdateWithoutPayout_rulesInput, PrizeTierUncheckedUpdateWithoutPayout_rulesInput>
    create: XOR<PrizeTierCreateWithoutPayout_rulesInput, PrizeTierUncheckedCreateWithoutPayout_rulesInput>
    where?: PrizeTierWhereInput
  }

  export type PrizeTierUpdateToOneWithWhereWithoutPayout_rulesInput = {
    where?: PrizeTierWhereInput
    data: XOR<PrizeTierUpdateWithoutPayout_rulesInput, PrizeTierUncheckedUpdateWithoutPayout_rulesInput>
  }

  export type PrizeTierUpdateWithoutPayout_rulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bets?: BetUpdateManyWithoutPrize_tierNestedInput
  }

  export type PrizeTierUncheckedUpdateWithoutPayout_rulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bets?: BetUncheckedUpdateManyWithoutPrize_tierNestedInput
  }

  export type DrawScheduleCreateWithoutDraw_resultsInput = {
    name: string
    draw_time: string
    bet_close_time: string
  }

  export type DrawScheduleUncheckedCreateWithoutDraw_resultsInput = {
    id?: number
    name: string
    draw_time: string
    bet_close_time: string
  }

  export type DrawScheduleCreateOrConnectWithoutDraw_resultsInput = {
    where: DrawScheduleWhereUniqueInput
    create: XOR<DrawScheduleCreateWithoutDraw_resultsInput, DrawScheduleUncheckedCreateWithoutDraw_resultsInput>
  }

  export type BetCreateWithoutDraw_resultInput = {
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user: UserCreateNestedOneWithoutBetsInput
    game_type: GameTypeCreateNestedOneWithoutBetsInput
    bet_type: BetTypeCreateNestedOneWithoutBetsInput
    prize_tier: PrizeTierCreateNestedOneWithoutBetsInput
  }

  export type BetUncheckedCreateWithoutDraw_resultInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
  }

  export type BetCreateOrConnectWithoutDraw_resultInput = {
    where: BetWhereUniqueInput
    create: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput>
  }

  export type BetCreateManyDraw_resultInputEnvelope = {
    data: BetCreateManyDraw_resultInput | BetCreateManyDraw_resultInput[]
  }

  export type DrawScheduleUpsertWithoutDraw_resultsInput = {
    update: XOR<DrawScheduleUpdateWithoutDraw_resultsInput, DrawScheduleUncheckedUpdateWithoutDraw_resultsInput>
    create: XOR<DrawScheduleCreateWithoutDraw_resultsInput, DrawScheduleUncheckedCreateWithoutDraw_resultsInput>
    where?: DrawScheduleWhereInput
  }

  export type DrawScheduleUpdateToOneWithWhereWithoutDraw_resultsInput = {
    where?: DrawScheduleWhereInput
    data: XOR<DrawScheduleUpdateWithoutDraw_resultsInput, DrawScheduleUncheckedUpdateWithoutDraw_resultsInput>
  }

  export type DrawScheduleUpdateWithoutDraw_resultsInput = {
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
  }

  export type DrawScheduleUncheckedUpdateWithoutDraw_resultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    draw_time?: StringFieldUpdateOperationsInput | string
    bet_close_time?: StringFieldUpdateOperationsInput | string
  }

  export type BetUpsertWithWhereUniqueWithoutDraw_resultInput = {
    where: BetWhereUniqueInput
    update: XOR<BetUpdateWithoutDraw_resultInput, BetUncheckedUpdateWithoutDraw_resultInput>
    create: XOR<BetCreateWithoutDraw_resultInput, BetUncheckedCreateWithoutDraw_resultInput>
  }

  export type BetUpdateWithWhereUniqueWithoutDraw_resultInput = {
    where: BetWhereUniqueInput
    data: XOR<BetUpdateWithoutDraw_resultInput, BetUncheckedUpdateWithoutDraw_resultInput>
  }

  export type BetUpdateManyWithWhereWithoutDraw_resultInput = {
    where: BetScalarWhereInput
    data: XOR<BetUpdateManyMutationInput, BetUncheckedUpdateManyWithoutDraw_resultInput>
  }

  export type UserCreateWithoutBetsInput = {
    name: string
    email: string
    password: string
    virtual_credits?: Decimal | DecimalJsLike | number | string
    is_admin?: boolean
  }

  export type UserUncheckedCreateWithoutBetsInput = {
    id?: number
    name: string
    email: string
    password: string
    virtual_credits?: Decimal | DecimalJsLike | number | string
    is_admin?: boolean
  }

  export type UserCreateOrConnectWithoutBetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBetsInput, UserUncheckedCreateWithoutBetsInput>
  }

  export type GameTypeCreateWithoutBetsInput = {
    name: string
    description?: string | null
  }

  export type GameTypeUncheckedCreateWithoutBetsInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type GameTypeCreateOrConnectWithoutBetsInput = {
    where: GameTypeWhereUniqueInput
    create: XOR<GameTypeCreateWithoutBetsInput, GameTypeUncheckedCreateWithoutBetsInput>
  }

  export type BetTypeCreateWithoutBetsInput = {
    name: string
    payout_rules?: PayoutRuleCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeUncheckedCreateWithoutBetsInput = {
    id?: number
    name: string
    payout_rules?: PayoutRuleUncheckedCreateNestedManyWithoutBet_typeInput
  }

  export type BetTypeCreateOrConnectWithoutBetsInput = {
    where: BetTypeWhereUniqueInput
    create: XOR<BetTypeCreateWithoutBetsInput, BetTypeUncheckedCreateWithoutBetsInput>
  }

  export type PrizeTierCreateWithoutBetsInput = {
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    payout_rules?: PayoutRuleCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierUncheckedCreateWithoutBetsInput = {
    id?: number
    name: string
    start_prize: number
    end_prize: number
    description?: string | null
    payout_rules?: PayoutRuleUncheckedCreateNestedManyWithoutPrize_tierInput
  }

  export type PrizeTierCreateOrConnectWithoutBetsInput = {
    where: PrizeTierWhereUniqueInput
    create: XOR<PrizeTierCreateWithoutBetsInput, PrizeTierUncheckedCreateWithoutBetsInput>
  }

  export type DrawResultCreateWithoutBetsInput = {
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    draw_schedule: DrawScheduleCreateNestedOneWithoutDraw_resultsInput
  }

  export type DrawResultUncheckedCreateWithoutBetsInput = {
    id?: number
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
    draw_schedule_id: number
  }

  export type DrawResultCreateOrConnectWithoutBetsInput = {
    where: DrawResultWhereUniqueInput
    create: XOR<DrawResultCreateWithoutBetsInput, DrawResultUncheckedCreateWithoutBetsInput>
  }

  export type UserUpsertWithoutBetsInput = {
    update: XOR<UserUpdateWithoutBetsInput, UserUncheckedUpdateWithoutBetsInput>
    create: XOR<UserCreateWithoutBetsInput, UserUncheckedCreateWithoutBetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBetsInput, UserUncheckedUpdateWithoutBetsInput>
  }

  export type UserUpdateWithoutBetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutBetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    virtual_credits?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameTypeUpsertWithoutBetsInput = {
    update: XOR<GameTypeUpdateWithoutBetsInput, GameTypeUncheckedUpdateWithoutBetsInput>
    create: XOR<GameTypeCreateWithoutBetsInput, GameTypeUncheckedCreateWithoutBetsInput>
    where?: GameTypeWhereInput
  }

  export type GameTypeUpdateToOneWithWhereWithoutBetsInput = {
    where?: GameTypeWhereInput
    data: XOR<GameTypeUpdateWithoutBetsInput, GameTypeUncheckedUpdateWithoutBetsInput>
  }

  export type GameTypeUpdateWithoutBetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameTypeUncheckedUpdateWithoutBetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BetTypeUpsertWithoutBetsInput = {
    update: XOR<BetTypeUpdateWithoutBetsInput, BetTypeUncheckedUpdateWithoutBetsInput>
    create: XOR<BetTypeCreateWithoutBetsInput, BetTypeUncheckedCreateWithoutBetsInput>
    where?: BetTypeWhereInput
  }

  export type BetTypeUpdateToOneWithWhereWithoutBetsInput = {
    where?: BetTypeWhereInput
    data: XOR<BetTypeUpdateWithoutBetsInput, BetTypeUncheckedUpdateWithoutBetsInput>
  }

  export type BetTypeUpdateWithoutBetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    payout_rules?: PayoutRuleUpdateManyWithoutBet_typeNestedInput
  }

  export type BetTypeUncheckedUpdateWithoutBetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    payout_rules?: PayoutRuleUncheckedUpdateManyWithoutBet_typeNestedInput
  }

  export type PrizeTierUpsertWithoutBetsInput = {
    update: XOR<PrizeTierUpdateWithoutBetsInput, PrizeTierUncheckedUpdateWithoutBetsInput>
    create: XOR<PrizeTierCreateWithoutBetsInput, PrizeTierUncheckedCreateWithoutBetsInput>
    where?: PrizeTierWhereInput
  }

  export type PrizeTierUpdateToOneWithWhereWithoutBetsInput = {
    where?: PrizeTierWhereInput
    data: XOR<PrizeTierUpdateWithoutBetsInput, PrizeTierUncheckedUpdateWithoutBetsInput>
  }

  export type PrizeTierUpdateWithoutBetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payout_rules?: PayoutRuleUpdateManyWithoutPrize_tierNestedInput
  }

  export type PrizeTierUncheckedUpdateWithoutBetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    start_prize?: IntFieldUpdateOperationsInput | number
    end_prize?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payout_rules?: PayoutRuleUncheckedUpdateManyWithoutPrize_tierNestedInput
  }

  export type DrawResultUpsertWithoutBetsInput = {
    update: XOR<DrawResultUpdateWithoutBetsInput, DrawResultUncheckedUpdateWithoutBetsInput>
    create: XOR<DrawResultCreateWithoutBetsInput, DrawResultUncheckedCreateWithoutBetsInput>
    where?: DrawResultWhereInput
  }

  export type DrawResultUpdateToOneWithWhereWithoutBetsInput = {
    where?: DrawResultWhereInput
    data: XOR<DrawResultUpdateWithoutBetsInput, DrawResultUncheckedUpdateWithoutBetsInput>
  }

  export type DrawResultUpdateWithoutBetsInput = {
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    draw_schedule?: DrawScheduleUpdateOneRequiredWithoutDraw_resultsNestedInput
  }

  export type DrawResultUncheckedUpdateWithoutBetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    draw_schedule_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetCreateManyUserInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetUpdateWithoutUserInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game_type?: GameTypeUpdateOneRequiredWithoutBetsNestedInput
    bet_type?: BetTypeUpdateOneRequiredWithoutBetsNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutBetsNestedInput
    draw_result?: DrawResultUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetCreateManyGame_typeInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    bet_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type BetUpdateWithoutGame_typeInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBetsNestedInput
    bet_type?: BetTypeUpdateOneRequiredWithoutBetsNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutBetsNestedInput
    draw_result?: DrawResultUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateWithoutGame_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUncheckedUpdateManyWithoutGame_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type PayoutRuleCreateManyPrize_tierInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    bet_type_id: number
  }

  export type BetCreateManyPrize_tierInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    draw_result_id: number
  }

  export type PayoutRuleUpdateWithoutPrize_tierInput = {
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type?: BetTypeUpdateOneRequiredWithoutPayout_rulesNestedInput
  }

  export type PayoutRuleUncheckedUpdateWithoutPrize_tierInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type PayoutRuleUncheckedUpdateManyWithoutPrize_tierInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bet_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUpdateWithoutPrize_tierInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBetsNestedInput
    game_type?: GameTypeUpdateOneRequiredWithoutBetsNestedInput
    bet_type?: BetTypeUpdateOneRequiredWithoutBetsNestedInput
    draw_result?: DrawResultUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateWithoutPrize_tierInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUncheckedUpdateManyWithoutPrize_tierInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type DrawResultCreateManyDraw_scheduleInput = {
    id?: number
    draw_date: Date | string
    prize1_number?: string | null
    prize2_number?: string | null
    prize3_number?: string | null
    prize4_number?: string | null
    prize5_number?: string | null
    prize6_number?: string | null
    prize7_number?: string | null
    status?: $Enums.DrawStatus
  }

  export type DrawResultUpdateWithoutDraw_scheduleInput = {
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    bets?: BetUpdateManyWithoutDraw_resultNestedInput
  }

  export type DrawResultUncheckedUpdateWithoutDraw_scheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
    bets?: BetUncheckedUpdateManyWithoutDraw_resultNestedInput
  }

  export type DrawResultUncheckedUpdateManyWithoutDraw_scheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    draw_date?: DateTimeFieldUpdateOperationsInput | Date | string
    prize1_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize2_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize3_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize4_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize5_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize6_number?: NullableStringFieldUpdateOperationsInput | string | null
    prize7_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDrawStatusFieldUpdateOperationsInput | $Enums.DrawStatus
  }

  export type PayoutRuleCreateManyBet_typeInput = {
    id?: number
    payout_rate: Decimal | DecimalJsLike | number | string
    prize_tier_id: number
  }

  export type BetCreateManyBet_typeInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    prize_tier_id: number
    draw_result_id: number
  }

  export type PayoutRuleUpdateWithoutBet_typeInput = {
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    prize_tier?: PrizeTierUpdateOneRequiredWithoutPayout_rulesNestedInput
  }

  export type PayoutRuleUncheckedUpdateWithoutBet_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }

  export type PayoutRuleUncheckedUpdateManyWithoutBet_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    payout_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUpdateWithoutBet_typeInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBetsNestedInput
    game_type?: GameTypeUpdateOneRequiredWithoutBetsNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutBetsNestedInput
    draw_result?: DrawResultUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateWithoutBet_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUncheckedUpdateManyWithoutBet_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
    draw_result_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetCreateManyDraw_resultInput = {
    id?: number
    numbers_betted: string
    amount_wagered: Decimal | DecimalJsLike | number | string
    amount_won?: Decimal | DecimalJsLike | number | string
    status?: $Enums.BetStatus
    created_at?: Date | string
    user_id: number
    game_type_id: number
    bet_type_id: number
    prize_tier_id: number
  }

  export type BetUpdateWithoutDraw_resultInput = {
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBetsNestedInput
    game_type?: GameTypeUpdateOneRequiredWithoutBetsNestedInput
    bet_type?: BetTypeUpdateOneRequiredWithoutBetsNestedInput
    prize_tier?: PrizeTierUpdateOneRequiredWithoutBetsNestedInput
  }

  export type BetUncheckedUpdateWithoutDraw_resultInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }

  export type BetUncheckedUpdateManyWithoutDraw_resultInput = {
    id?: IntFieldUpdateOperationsInput | number
    numbers_betted?: StringFieldUpdateOperationsInput | string
    amount_wagered?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount_won?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBetStatusFieldUpdateOperationsInput | $Enums.BetStatus
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    game_type_id?: IntFieldUpdateOperationsInput | number
    bet_type_id?: IntFieldUpdateOperationsInput | number
    prize_tier_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}