// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- NOSSOS MODELOS DA PANDA LOTERIAS ---

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String // Lembre-se de fazer o hash antes de salvar!
  virtual_credits Decimal  @default(1000.00) // Usuário já começa com créditos
  is_admin        Boolean  @default(false)
  bets            Bet[] // Relação: Um usuário tem muitas apostas
}

model GameType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String? // O '?' indica que é opcional
  bets        Bet[] // Relação: Um tipo de jogo está em muitas apostas
}

model PrizeTier {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  start_prize  Int // ex: 1
  end_prize    Int // ex: 5
  description  String?
  payout_rules PayoutRule[] // Relação: Este "tier" está em muitas regras
  bets         Bet[] // Relação: Este "tier" está em muitas apostas
}

model DrawSchedule {
  id             Int           @id @default(autoincrement())
  name           String        @unique // ex: PTM, Corujinha
  draw_time      String // Armazenar como "HH:mm", ex: "11:20"
  bet_close_time String // Armazenar como "HH:mm", ex: "11:15"
  draw_results   DrawResult[] // Relação: Um horário tem muitos resultados (um por dia)
}

model BetType {
  id           Int           @id @default(autoincrement())
  name         String        @unique // ex: Grupo, Centena
  payout_rules PayoutRule[] // Relação: Este tipo de aposta tem muitas regras
  bets         Bet[] // Relação: Este tipo de aposta está em muitas apostas
}

model PayoutRule {
  id            Int       @id @default(autoincrement())
  payout_rate   Decimal // A taxa de pagamento
  bet_type_id   Int
  bet_type      BetType   @relation(fields: [bet_type_id], references: [id])
  prize_tier_id Int
  prize_tier    PrizeTier @relation(fields: [prize_tier_id], references: [id])

  @@unique([bet_type_id, prize_tier_id]) // Garante que só existe uma regra por combinação
}

model DrawResult {
  id               Int          @id @default(autoincrement())
  draw_date        DateTime // Prisma usa DateTime para Date. Vamos armazenar a data.
  prize1_number    String? // Opcional, pois pode estar pendente
  prize2_number    String?
  prize3_number    String?
  prize4_number    String?
  prize5_number    String?
  prize6_number    String?
  prize7_number    String?
  status           DrawStatus   @default(PENDING) // Nosso ENUM
  draw_schedule_id Int
  draw_schedule    DrawSchedule @relation(fields: [draw_schedule_id], references: [id])
  bets             Bet[] // Relação: Um resultado de sorteio tem muitas apostas

  @@unique([draw_schedule_id, draw_date]) // Garante um resultado por horário/dia
}

model Bet {
  id              Int       @id @default(autoincrement())
  numbers_betted  String // Pode ser um JSON string: '["5", "10"]' ou só '"123"'
  amount_wagered  Decimal
  amount_won      Decimal   @default(0.0)
  status          BetStatus @default(PENDING) // Nosso ENUM
  created_at      DateTime  @default(now())
  user_id         Int
  user            User      @relation(fields: [user_id], references: [id])
  game_type_id    Int
  game_type       GameType  @relation(fields: [game_type_id], references: [id])
  bet_type_id     Int
  bet_type        BetType   @relation(fields: [bet_type_id], references: [id])
  prize_tier_id   Int
  prize_tier      PrizeTier @relation(fields: [prize_tier_id], references: [id])
  draw_result_id  Int
  draw_result     DrawResult @relation(fields: [draw_result_id], references: [id])
}

// Definição dos nossos ENUMs
enum DrawStatus {
  PENDING
  PUBLISHED
  CANCELLED
}

enum BetStatus {
  PENDING
  WON
  LOST
}